# coding: utf-8

"""
    CyberSource Merged Spec

    All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ReportingV3ConversionDetailsGet200Response(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'organization_id': 'str',
        'start_time': 'datetime',
        'end_time': 'datetime',
        'conversion_details': 'list[ReportingV3ConversionDetailsGet200ResponseConversionDetails]'
    }

    attribute_map = {
        'organization_id': 'organizationId',
        'start_time': 'startTime',
        'end_time': 'endTime',
        'conversion_details': 'conversionDetails'
    }

    def __init__(self, organization_id=None, start_time=None, end_time=None, conversion_details=None):
        """
        ReportingV3ConversionDetailsGet200Response - a model defined in Swagger
        """

        self._organization_id = None
        self._start_time = None
        self._end_time = None
        self._conversion_details = None

        if organization_id is not None:
          self.organization_id = organization_id
        if start_time is not None:
          self.start_time = start_time
        if end_time is not None:
          self.end_time = end_time
        if conversion_details is not None:
          self.conversion_details = conversion_details

    @property
    def organization_id(self):
        """
        Gets the organization_id of this ReportingV3ConversionDetailsGet200Response.
        Merchant Id

        :return: The organization_id of this ReportingV3ConversionDetailsGet200Response.
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """
        Sets the organization_id of this ReportingV3ConversionDetailsGet200Response.
        Merchant Id

        :param organization_id: The organization_id of this ReportingV3ConversionDetailsGet200Response.
        :type: str
        """

        self._organization_id = organization_id

    @property
    def start_time(self):
        """
        Gets the start_time of this ReportingV3ConversionDetailsGet200Response.

        :return: The start_time of this ReportingV3ConversionDetailsGet200Response.
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """
        Sets the start_time of this ReportingV3ConversionDetailsGet200Response.

        :param start_time: The start_time of this ReportingV3ConversionDetailsGet200Response.
        :type: datetime
        """

        self._start_time = start_time

    @property
    def end_time(self):
        """
        Gets the end_time of this ReportingV3ConversionDetailsGet200Response.

        :return: The end_time of this ReportingV3ConversionDetailsGet200Response.
        :rtype: datetime
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """
        Sets the end_time of this ReportingV3ConversionDetailsGet200Response.

        :param end_time: The end_time of this ReportingV3ConversionDetailsGet200Response.
        :type: datetime
        """

        self._end_time = end_time

    @property
    def conversion_details(self):
        """
        Gets the conversion_details of this ReportingV3ConversionDetailsGet200Response.

        :return: The conversion_details of this ReportingV3ConversionDetailsGet200Response.
        :rtype: list[ReportingV3ConversionDetailsGet200ResponseConversionDetails]
        """
        return self._conversion_details

    @conversion_details.setter
    def conversion_details(self, conversion_details):
        """
        Sets the conversion_details of this ReportingV3ConversionDetailsGet200Response.

        :param conversion_details: The conversion_details of this ReportingV3ConversionDetailsGet200Response.
        :type: list[ReportingV3ConversionDetailsGet200ResponseConversionDetails]
        """

        self._conversion_details = conversion_details

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ReportingV3ConversionDetailsGet200Response):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
