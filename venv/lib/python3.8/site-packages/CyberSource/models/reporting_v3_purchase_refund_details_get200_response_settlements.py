# coding: utf-8

"""
    CyberSource Merged Spec

    All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ReportingV3PurchaseRefundDetailsGet200ResponseSettlements(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'request_id': 'str',
        'transaction_type': 'str',
        'submission_time': 'datetime',
        'amount': 'str',
        'currency_code': 'str',
        'payment_method': 'str',
        'wallet_type': 'str',
        'payment_type': 'str',
        'account_suffix': 'str',
        'cybersource_batch_time': 'datetime',
        'cybersource_batch_id': 'str',
        'card_type': 'str',
        'debit_network': 'str'
    }

    attribute_map = {
        'request_id': 'requestId',
        'transaction_type': 'transactionType',
        'submission_time': 'submissionTime',
        'amount': 'amount',
        'currency_code': 'currencyCode',
        'payment_method': 'paymentMethod',
        'wallet_type': 'walletType',
        'payment_type': 'paymentType',
        'account_suffix': 'accountSuffix',
        'cybersource_batch_time': 'cybersourceBatchTime',
        'cybersource_batch_id': 'cybersourceBatchId',
        'card_type': 'cardType',
        'debit_network': 'debitNetwork'
    }

    def __init__(self, request_id=None, transaction_type=None, submission_time=None, amount=None, currency_code=None, payment_method=None, wallet_type=None, payment_type=None, account_suffix=None, cybersource_batch_time=None, cybersource_batch_id=None, card_type=None, debit_network=None):
        """
        ReportingV3PurchaseRefundDetailsGet200ResponseSettlements - a model defined in Swagger
        """

        self._request_id = None
        self._transaction_type = None
        self._submission_time = None
        self._amount = None
        self._currency_code = None
        self._payment_method = None
        self._wallet_type = None
        self._payment_type = None
        self._account_suffix = None
        self._cybersource_batch_time = None
        self._cybersource_batch_id = None
        self._card_type = None
        self._debit_network = None

        if request_id is not None:
          self.request_id = request_id
        if transaction_type is not None:
          self.transaction_type = transaction_type
        if submission_time is not None:
          self.submission_time = submission_time
        if amount is not None:
          self.amount = amount
        if currency_code is not None:
          self.currency_code = currency_code
        if payment_method is not None:
          self.payment_method = payment_method
        if wallet_type is not None:
          self.wallet_type = wallet_type
        if payment_type is not None:
          self.payment_type = payment_type
        if account_suffix is not None:
          self.account_suffix = account_suffix
        if cybersource_batch_time is not None:
          self.cybersource_batch_time = cybersource_batch_time
        if cybersource_batch_id is not None:
          self.cybersource_batch_id = cybersource_batch_id
        if card_type is not None:
          self.card_type = card_type
        if debit_network is not None:
          self.debit_network = debit_network

    @property
    def request_id(self):
        """
        Gets the request_id of this ReportingV3PurchaseRefundDetailsGet200ResponseSettlements.
        An unique identification number assigned by CyberSource to identify the submitted request.

        :return: The request_id of this ReportingV3PurchaseRefundDetailsGet200ResponseSettlements.
        :rtype: str
        """
        return self._request_id

    @request_id.setter
    def request_id(self, request_id):
        """
        Sets the request_id of this ReportingV3PurchaseRefundDetailsGet200ResponseSettlements.
        An unique identification number assigned by CyberSource to identify the submitted request.

        :param request_id: The request_id of this ReportingV3PurchaseRefundDetailsGet200ResponseSettlements.
        :type: str
        """

        self._request_id = request_id

    @property
    def transaction_type(self):
        """
        Gets the transaction_type of this ReportingV3PurchaseRefundDetailsGet200ResponseSettlements.
        Transaction Type

        :return: The transaction_type of this ReportingV3PurchaseRefundDetailsGet200ResponseSettlements.
        :rtype: str
        """
        return self._transaction_type

    @transaction_type.setter
    def transaction_type(self, transaction_type):
        """
        Sets the transaction_type of this ReportingV3PurchaseRefundDetailsGet200ResponseSettlements.
        Transaction Type

        :param transaction_type: The transaction_type of this ReportingV3PurchaseRefundDetailsGet200ResponseSettlements.
        :type: str
        """

        self._transaction_type = transaction_type

    @property
    def submission_time(self):
        """
        Gets the submission_time of this ReportingV3PurchaseRefundDetailsGet200ResponseSettlements.
        Submission Date

        :return: The submission_time of this ReportingV3PurchaseRefundDetailsGet200ResponseSettlements.
        :rtype: datetime
        """
        return self._submission_time

    @submission_time.setter
    def submission_time(self, submission_time):
        """
        Sets the submission_time of this ReportingV3PurchaseRefundDetailsGet200ResponseSettlements.
        Submission Date

        :param submission_time: The submission_time of this ReportingV3PurchaseRefundDetailsGet200ResponseSettlements.
        :type: datetime
        """

        self._submission_time = submission_time

    @property
    def amount(self):
        """
        Gets the amount of this ReportingV3PurchaseRefundDetailsGet200ResponseSettlements.
        Amount

        :return: The amount of this ReportingV3PurchaseRefundDetailsGet200ResponseSettlements.
        :rtype: str
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """
        Sets the amount of this ReportingV3PurchaseRefundDetailsGet200ResponseSettlements.
        Amount

        :param amount: The amount of this ReportingV3PurchaseRefundDetailsGet200ResponseSettlements.
        :type: str
        """

        self._amount = amount

    @property
    def currency_code(self):
        """
        Gets the currency_code of this ReportingV3PurchaseRefundDetailsGet200ResponseSettlements.
        Valid ISO 4217 ALPHA-3 currency code

        :return: The currency_code of this ReportingV3PurchaseRefundDetailsGet200ResponseSettlements.
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """
        Sets the currency_code of this ReportingV3PurchaseRefundDetailsGet200ResponseSettlements.
        Valid ISO 4217 ALPHA-3 currency code

        :param currency_code: The currency_code of this ReportingV3PurchaseRefundDetailsGet200ResponseSettlements.
        :type: str
        """

        self._currency_code = currency_code

    @property
    def payment_method(self):
        """
        Gets the payment_method of this ReportingV3PurchaseRefundDetailsGet200ResponseSettlements.
        payment method

        :return: The payment_method of this ReportingV3PurchaseRefundDetailsGet200ResponseSettlements.
        :rtype: str
        """
        return self._payment_method

    @payment_method.setter
    def payment_method(self, payment_method):
        """
        Sets the payment_method of this ReportingV3PurchaseRefundDetailsGet200ResponseSettlements.
        payment method

        :param payment_method: The payment_method of this ReportingV3PurchaseRefundDetailsGet200ResponseSettlements.
        :type: str
        """

        self._payment_method = payment_method

    @property
    def wallet_type(self):
        """
        Gets the wallet_type of this ReportingV3PurchaseRefundDetailsGet200ResponseSettlements.
        Solution Type (Wallet)

        :return: The wallet_type of this ReportingV3PurchaseRefundDetailsGet200ResponseSettlements.
        :rtype: str
        """
        return self._wallet_type

    @wallet_type.setter
    def wallet_type(self, wallet_type):
        """
        Sets the wallet_type of this ReportingV3PurchaseRefundDetailsGet200ResponseSettlements.
        Solution Type (Wallet)

        :param wallet_type: The wallet_type of this ReportingV3PurchaseRefundDetailsGet200ResponseSettlements.
        :type: str
        """

        self._wallet_type = wallet_type

    @property
    def payment_type(self):
        """
        Gets the payment_type of this ReportingV3PurchaseRefundDetailsGet200ResponseSettlements.
        Payment Type

        :return: The payment_type of this ReportingV3PurchaseRefundDetailsGet200ResponseSettlements.
        :rtype: str
        """
        return self._payment_type

    @payment_type.setter
    def payment_type(self, payment_type):
        """
        Sets the payment_type of this ReportingV3PurchaseRefundDetailsGet200ResponseSettlements.
        Payment Type

        :param payment_type: The payment_type of this ReportingV3PurchaseRefundDetailsGet200ResponseSettlements.
        :type: str
        """

        self._payment_type = payment_type

    @property
    def account_suffix(self):
        """
        Gets the account_suffix of this ReportingV3PurchaseRefundDetailsGet200ResponseSettlements.
        Account Suffix

        :return: The account_suffix of this ReportingV3PurchaseRefundDetailsGet200ResponseSettlements.
        :rtype: str
        """
        return self._account_suffix

    @account_suffix.setter
    def account_suffix(self, account_suffix):
        """
        Sets the account_suffix of this ReportingV3PurchaseRefundDetailsGet200ResponseSettlements.
        Account Suffix

        :param account_suffix: The account_suffix of this ReportingV3PurchaseRefundDetailsGet200ResponseSettlements.
        :type: str
        """

        self._account_suffix = account_suffix

    @property
    def cybersource_batch_time(self):
        """
        Gets the cybersource_batch_time of this ReportingV3PurchaseRefundDetailsGet200ResponseSettlements.
        Cybersource Batch Time

        :return: The cybersource_batch_time of this ReportingV3PurchaseRefundDetailsGet200ResponseSettlements.
        :rtype: datetime
        """
        return self._cybersource_batch_time

    @cybersource_batch_time.setter
    def cybersource_batch_time(self, cybersource_batch_time):
        """
        Sets the cybersource_batch_time of this ReportingV3PurchaseRefundDetailsGet200ResponseSettlements.
        Cybersource Batch Time

        :param cybersource_batch_time: The cybersource_batch_time of this ReportingV3PurchaseRefundDetailsGet200ResponseSettlements.
        :type: datetime
        """

        self._cybersource_batch_time = cybersource_batch_time

    @property
    def cybersource_batch_id(self):
        """
        Gets the cybersource_batch_id of this ReportingV3PurchaseRefundDetailsGet200ResponseSettlements.
        Cybersource Batch Id

        :return: The cybersource_batch_id of this ReportingV3PurchaseRefundDetailsGet200ResponseSettlements.
        :rtype: str
        """
        return self._cybersource_batch_id

    @cybersource_batch_id.setter
    def cybersource_batch_id(self, cybersource_batch_id):
        """
        Sets the cybersource_batch_id of this ReportingV3PurchaseRefundDetailsGet200ResponseSettlements.
        Cybersource Batch Id

        :param cybersource_batch_id: The cybersource_batch_id of this ReportingV3PurchaseRefundDetailsGet200ResponseSettlements.
        :type: str
        """

        self._cybersource_batch_id = cybersource_batch_id

    @property
    def card_type(self):
        """
        Gets the card_type of this ReportingV3PurchaseRefundDetailsGet200ResponseSettlements.
        Card Type

        :return: The card_type of this ReportingV3PurchaseRefundDetailsGet200ResponseSettlements.
        :rtype: str
        """
        return self._card_type

    @card_type.setter
    def card_type(self, card_type):
        """
        Sets the card_type of this ReportingV3PurchaseRefundDetailsGet200ResponseSettlements.
        Card Type

        :param card_type: The card_type of this ReportingV3PurchaseRefundDetailsGet200ResponseSettlements.
        :type: str
        """

        self._card_type = card_type

    @property
    def debit_network(self):
        """
        Gets the debit_network of this ReportingV3PurchaseRefundDetailsGet200ResponseSettlements.
        Debit Network

        :return: The debit_network of this ReportingV3PurchaseRefundDetailsGet200ResponseSettlements.
        :rtype: str
        """
        return self._debit_network

    @debit_network.setter
    def debit_network(self, debit_network):
        """
        Sets the debit_network of this ReportingV3PurchaseRefundDetailsGet200ResponseSettlements.
        Debit Network

        :param debit_network: The debit_network of this ReportingV3PurchaseRefundDetailsGet200ResponseSettlements.
        :type: str
        """

        self._debit_network = debit_network

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ReportingV3PurchaseRefundDetailsGet200ResponseSettlements):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
