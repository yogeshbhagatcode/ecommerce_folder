# coding: utf-8

"""
    CyberSource Merged Spec

    All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Ptsv2paymentsOrderInformationAmountDetailsCurrencyConversion(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'indicator': 'str',
        'reconciliation_id': 'str',
        'id': 'str'
    }

    attribute_map = {
        'indicator': 'indicator',
        'reconciliation_id': 'reconciliationId',
        'id': 'id'
    }

    def __init__(self, indicator=None, reconciliation_id=None, id=None):
        """
        Ptsv2paymentsOrderInformationAmountDetailsCurrencyConversion - a model defined in Swagger
        """

        self._indicator = None
        self._reconciliation_id = None
        self._id = None

        if indicator is not None:
          self.indicator = indicator
        if reconciliation_id is not None:
          self.reconciliation_id = reconciliation_id
        if id is not None:
          self.id = id

    @property
    def indicator(self):
        """
        Gets the indicator of this Ptsv2paymentsOrderInformationAmountDetailsCurrencyConversion.
        Flag indicating that DCC Lookup has been performed before this transaction. Set this field to 1 when cardholders opts to use DCC on the transaction. 

        :return: The indicator of this Ptsv2paymentsOrderInformationAmountDetailsCurrencyConversion.
        :rtype: str
        """
        return self._indicator

    @indicator.setter
    def indicator(self, indicator):
        """
        Sets the indicator of this Ptsv2paymentsOrderInformationAmountDetailsCurrencyConversion.
        Flag indicating that DCC Lookup has been performed before this transaction. Set this field to 1 when cardholders opts to use DCC on the transaction. 

        :param indicator: The indicator of this Ptsv2paymentsOrderInformationAmountDetailsCurrencyConversion.
        :type: str
        """
        if indicator is not None and len(indicator) > 1:
            raise ValueError("Invalid value for `indicator`, length must be less than or equal to `1`")

        self._indicator = indicator

    @property
    def reconciliation_id(self):
        """
        Gets the reconciliation_id of this Ptsv2paymentsOrderInformationAmountDetailsCurrencyConversion.
        Unique identifier generated by the DCC provider. 

        :return: The reconciliation_id of this Ptsv2paymentsOrderInformationAmountDetailsCurrencyConversion.
        :rtype: str
        """
        return self._reconciliation_id

    @reconciliation_id.setter
    def reconciliation_id(self, reconciliation_id):
        """
        Sets the reconciliation_id of this Ptsv2paymentsOrderInformationAmountDetailsCurrencyConversion.
        Unique identifier generated by the DCC provider. 

        :param reconciliation_id: The reconciliation_id of this Ptsv2paymentsOrderInformationAmountDetailsCurrencyConversion.
        :type: str
        """
        if reconciliation_id is not None and len(reconciliation_id) > 60:
            raise ValueError("Invalid value for `reconciliation_id`, length must be less than or equal to `60`")

        self._reconciliation_id = reconciliation_id

    @property
    def id(self):
        """
        Gets the id of this Ptsv2paymentsOrderInformationAmountDetailsCurrencyConversion.
        Value of the Cybersource request ID returned in a DCC Lookup transaction. 

        :return: The id of this Ptsv2paymentsOrderInformationAmountDetailsCurrencyConversion.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Ptsv2paymentsOrderInformationAmountDetailsCurrencyConversion.
        Value of the Cybersource request ID returned in a DCC Lookup transaction. 

        :param id: The id of this Ptsv2paymentsOrderInformationAmountDetailsCurrencyConversion.
        :type: str
        """
        if id is not None and len(id) > 26:
            raise ValueError("Invalid value for `id`, length must be less than or equal to `26`")

        self._id = id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Ptsv2paymentsOrderInformationAmountDetailsCurrencyConversion):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
