# coding: utf-8

"""
    CyberSource Merged Spec

    All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class TaxRequest(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'client_reference_information': 'Vasv2taxClientReferenceInformation',
        'tax_information': 'Vasv2taxTaxInformation',
        'order_information': 'Vasv2taxOrderInformation',
        'merchant_information': 'Vasv2taxMerchantInformation',
        'buyer_information': 'Vasv2taxBuyerInformation'
    }

    attribute_map = {
        'client_reference_information': 'clientReferenceInformation',
        'tax_information': 'taxInformation',
        'order_information': 'orderInformation',
        'merchant_information': 'merchantInformation',
        'buyer_information': 'buyerInformation'
    }

    def __init__(self, client_reference_information=None, tax_information=None, order_information=None, merchant_information=None, buyer_information=None):
        """
        TaxRequest - a model defined in Swagger
        """

        self._client_reference_information = None
        self._tax_information = None
        self._order_information = None
        self._merchant_information = None
        self._buyer_information = None

        if client_reference_information is not None:
          self.client_reference_information = client_reference_information
        if tax_information is not None:
          self.tax_information = tax_information
        if order_information is not None:
          self.order_information = order_information
        if merchant_information is not None:
          self.merchant_information = merchant_information
        if buyer_information is not None:
          self.buyer_information = buyer_information

    @property
    def client_reference_information(self):
        """
        Gets the client_reference_information of this TaxRequest.

        :return: The client_reference_information of this TaxRequest.
        :rtype: Vasv2taxClientReferenceInformation
        """
        return self._client_reference_information

    @client_reference_information.setter
    def client_reference_information(self, client_reference_information):
        """
        Sets the client_reference_information of this TaxRequest.

        :param client_reference_information: The client_reference_information of this TaxRequest.
        :type: Vasv2taxClientReferenceInformation
        """

        self._client_reference_information = client_reference_information

    @property
    def tax_information(self):
        """
        Gets the tax_information of this TaxRequest.

        :return: The tax_information of this TaxRequest.
        :rtype: Vasv2taxTaxInformation
        """
        return self._tax_information

    @tax_information.setter
    def tax_information(self, tax_information):
        """
        Sets the tax_information of this TaxRequest.

        :param tax_information: The tax_information of this TaxRequest.
        :type: Vasv2taxTaxInformation
        """

        self._tax_information = tax_information

    @property
    def order_information(self):
        """
        Gets the order_information of this TaxRequest.

        :return: The order_information of this TaxRequest.
        :rtype: Vasv2taxOrderInformation
        """
        return self._order_information

    @order_information.setter
    def order_information(self, order_information):
        """
        Sets the order_information of this TaxRequest.

        :param order_information: The order_information of this TaxRequest.
        :type: Vasv2taxOrderInformation
        """

        self._order_information = order_information

    @property
    def merchant_information(self):
        """
        Gets the merchant_information of this TaxRequest.

        :return: The merchant_information of this TaxRequest.
        :rtype: Vasv2taxMerchantInformation
        """
        return self._merchant_information

    @merchant_information.setter
    def merchant_information(self, merchant_information):
        """
        Sets the merchant_information of this TaxRequest.

        :param merchant_information: The merchant_information of this TaxRequest.
        :type: Vasv2taxMerchantInformation
        """

        self._merchant_information = merchant_information

    @property
    def buyer_information(self):
        """
        Gets the buyer_information of this TaxRequest.

        :return: The buyer_information of this TaxRequest.
        :rtype: Vasv2taxBuyerInformation
        """
        return self._buyer_information

    @buyer_information.setter
    def buyer_information(self, buyer_information):
        """
        Sets the buyer_information of this TaxRequest.

        :param buyer_information: The buyer_information of this TaxRequest.
        :type: Vasv2taxBuyerInformation
        """

        self._buyer_information = buyer_information

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, TaxRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
