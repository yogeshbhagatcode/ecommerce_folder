# coding: utf-8

"""
    CyberSource Merged Spec

    All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ReportingV3NetFundingsGet200Response(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'start_time': 'datetime',
        'end_time': 'datetime',
        'net_funding_summaries': 'list[ReportingV3NetFundingsGet200ResponseNetFundingSummaries]',
        'total_purchases': 'list[ReportingV3NetFundingsGet200ResponseTotalPurchases]',
        'total_refunds': 'list[ReportingV3NetFundingsGet200ResponseTotalPurchases]',
        'total_fees': 'list[ReportingV3NetFundingsGet200ResponseTotalPurchases]',
        'total_chargebacks': 'list[ReportingV3NetFundingsGet200ResponseTotalPurchases]',
        'net_total': 'list[ReportingV3NetFundingsGet200ResponseTotalPurchases]'
    }

    attribute_map = {
        'start_time': 'startTime',
        'end_time': 'endTime',
        'net_funding_summaries': 'netFundingSummaries',
        'total_purchases': 'totalPurchases',
        'total_refunds': 'totalRefunds',
        'total_fees': 'totalFees',
        'total_chargebacks': 'totalChargebacks',
        'net_total': 'netTotal'
    }

    def __init__(self, start_time=None, end_time=None, net_funding_summaries=None, total_purchases=None, total_refunds=None, total_fees=None, total_chargebacks=None, net_total=None):
        """
        ReportingV3NetFundingsGet200Response - a model defined in Swagger
        """

        self._start_time = None
        self._end_time = None
        self._net_funding_summaries = None
        self._total_purchases = None
        self._total_refunds = None
        self._total_fees = None
        self._total_chargebacks = None
        self._net_total = None

        if start_time is not None:
          self.start_time = start_time
        if end_time is not None:
          self.end_time = end_time
        if net_funding_summaries is not None:
          self.net_funding_summaries = net_funding_summaries
        if total_purchases is not None:
          self.total_purchases = total_purchases
        if total_refunds is not None:
          self.total_refunds = total_refunds
        if total_fees is not None:
          self.total_fees = total_fees
        if total_chargebacks is not None:
          self.total_chargebacks = total_chargebacks
        if net_total is not None:
          self.net_total = net_total

    @property
    def start_time(self):
        """
        Gets the start_time of this ReportingV3NetFundingsGet200Response.
        Valid report Start Date in **ISO 8601 format**. Please refer the following link to know more about ISO 8601 format.[Rfc Date Format](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14)  **Example:** - yyyy-MM-dd'T'HH:mm:ss.SSSZZ 

        :return: The start_time of this ReportingV3NetFundingsGet200Response.
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """
        Sets the start_time of this ReportingV3NetFundingsGet200Response.
        Valid report Start Date in **ISO 8601 format**. Please refer the following link to know more about ISO 8601 format.[Rfc Date Format](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14)  **Example:** - yyyy-MM-dd'T'HH:mm:ss.SSSZZ 

        :param start_time: The start_time of this ReportingV3NetFundingsGet200Response.
        :type: datetime
        """

        self._start_time = start_time

    @property
    def end_time(self):
        """
        Gets the end_time of this ReportingV3NetFundingsGet200Response.
        Valid report End Date in **ISO 8601 format** **Example date format:** - yyyy-MM-dd'T'HH:mm:ss.SSSZZ 

        :return: The end_time of this ReportingV3NetFundingsGet200Response.
        :rtype: datetime
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """
        Sets the end_time of this ReportingV3NetFundingsGet200Response.
        Valid report End Date in **ISO 8601 format** **Example date format:** - yyyy-MM-dd'T'HH:mm:ss.SSSZZ 

        :param end_time: The end_time of this ReportingV3NetFundingsGet200Response.
        :type: datetime
        """

        self._end_time = end_time

    @property
    def net_funding_summaries(self):
        """
        Gets the net_funding_summaries of this ReportingV3NetFundingsGet200Response.
        List of Netfunding summary objects

        :return: The net_funding_summaries of this ReportingV3NetFundingsGet200Response.
        :rtype: list[ReportingV3NetFundingsGet200ResponseNetFundingSummaries]
        """
        return self._net_funding_summaries

    @net_funding_summaries.setter
    def net_funding_summaries(self, net_funding_summaries):
        """
        Sets the net_funding_summaries of this ReportingV3NetFundingsGet200Response.
        List of Netfunding summary objects

        :param net_funding_summaries: The net_funding_summaries of this ReportingV3NetFundingsGet200Response.
        :type: list[ReportingV3NetFundingsGet200ResponseNetFundingSummaries]
        """

        self._net_funding_summaries = net_funding_summaries

    @property
    def total_purchases(self):
        """
        Gets the total_purchases of this ReportingV3NetFundingsGet200Response.
        List of total purchases currency wise

        :return: The total_purchases of this ReportingV3NetFundingsGet200Response.
        :rtype: list[ReportingV3NetFundingsGet200ResponseTotalPurchases]
        """
        return self._total_purchases

    @total_purchases.setter
    def total_purchases(self, total_purchases):
        """
        Sets the total_purchases of this ReportingV3NetFundingsGet200Response.
        List of total purchases currency wise

        :param total_purchases: The total_purchases of this ReportingV3NetFundingsGet200Response.
        :type: list[ReportingV3NetFundingsGet200ResponseTotalPurchases]
        """

        self._total_purchases = total_purchases

    @property
    def total_refunds(self):
        """
        Gets the total_refunds of this ReportingV3NetFundingsGet200Response.
        List of total refunds currency wise

        :return: The total_refunds of this ReportingV3NetFundingsGet200Response.
        :rtype: list[ReportingV3NetFundingsGet200ResponseTotalPurchases]
        """
        return self._total_refunds

    @total_refunds.setter
    def total_refunds(self, total_refunds):
        """
        Sets the total_refunds of this ReportingV3NetFundingsGet200Response.
        List of total refunds currency wise

        :param total_refunds: The total_refunds of this ReportingV3NetFundingsGet200Response.
        :type: list[ReportingV3NetFundingsGet200ResponseTotalPurchases]
        """

        self._total_refunds = total_refunds

    @property
    def total_fees(self):
        """
        Gets the total_fees of this ReportingV3NetFundingsGet200Response.
        List of total fees currency wise

        :return: The total_fees of this ReportingV3NetFundingsGet200Response.
        :rtype: list[ReportingV3NetFundingsGet200ResponseTotalPurchases]
        """
        return self._total_fees

    @total_fees.setter
    def total_fees(self, total_fees):
        """
        Sets the total_fees of this ReportingV3NetFundingsGet200Response.
        List of total fees currency wise

        :param total_fees: The total_fees of this ReportingV3NetFundingsGet200Response.
        :type: list[ReportingV3NetFundingsGet200ResponseTotalPurchases]
        """

        self._total_fees = total_fees

    @property
    def total_chargebacks(self):
        """
        Gets the total_chargebacks of this ReportingV3NetFundingsGet200Response.
        List of total chargebacks currency wise

        :return: The total_chargebacks of this ReportingV3NetFundingsGet200Response.
        :rtype: list[ReportingV3NetFundingsGet200ResponseTotalPurchases]
        """
        return self._total_chargebacks

    @total_chargebacks.setter
    def total_chargebacks(self, total_chargebacks):
        """
        Sets the total_chargebacks of this ReportingV3NetFundingsGet200Response.
        List of total chargebacks currency wise

        :param total_chargebacks: The total_chargebacks of this ReportingV3NetFundingsGet200Response.
        :type: list[ReportingV3NetFundingsGet200ResponseTotalPurchases]
        """

        self._total_chargebacks = total_chargebacks

    @property
    def net_total(self):
        """
        Gets the net_total of this ReportingV3NetFundingsGet200Response.
        List of new total currency wise

        :return: The net_total of this ReportingV3NetFundingsGet200Response.
        :rtype: list[ReportingV3NetFundingsGet200ResponseTotalPurchases]
        """
        return self._net_total

    @net_total.setter
    def net_total(self, net_total):
        """
        Sets the net_total of this ReportingV3NetFundingsGet200Response.
        List of new total currency wise

        :param net_total: The net_total of this ReportingV3NetFundingsGet200Response.
        :type: list[ReportingV3NetFundingsGet200ResponseTotalPurchases]
        """

        self._net_total = net_total

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ReportingV3NetFundingsGet200Response):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
