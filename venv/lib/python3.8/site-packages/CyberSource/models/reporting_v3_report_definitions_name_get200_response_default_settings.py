# coding: utf-8

"""
    CyberSource Merged Spec

    All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ReportingV3ReportDefinitionsNameGet200ResponseDefaultSettings(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'report_mime_type': 'str',
        'report_frequency': 'str',
        'report_name': 'str',
        'timezone': 'str',
        'start_time': 'str',
        'start_day': 'int',
        'report_filters': 'dict(str, list[str])',
        'report_preferences': 'Reportingv3reportsReportPreferences'
    }

    attribute_map = {
        'report_mime_type': 'reportMimeType',
        'report_frequency': 'reportFrequency',
        'report_name': 'reportName',
        'timezone': 'timezone',
        'start_time': 'startTime',
        'start_day': 'startDay',
        'report_filters': 'reportFilters',
        'report_preferences': 'reportPreferences'
    }

    def __init__(self, report_mime_type=None, report_frequency=None, report_name=None, timezone=None, start_time=None, start_day=None, report_filters=None, report_preferences=None):
        """
        ReportingV3ReportDefinitionsNameGet200ResponseDefaultSettings - a model defined in Swagger
        """

        self._report_mime_type = None
        self._report_frequency = None
        self._report_name = None
        self._timezone = None
        self._start_time = None
        self._start_day = None
        self._report_filters = None
        self._report_preferences = None

        if report_mime_type is not None:
          self.report_mime_type = report_mime_type
        if report_frequency is not None:
          self.report_frequency = report_frequency
        if report_name is not None:
          self.report_name = report_name
        if timezone is not None:
          self.timezone = timezone
        if start_time is not None:
          self.start_time = start_time
        if start_day is not None:
          self.start_day = start_day
        if report_filters is not None:
          self.report_filters = report_filters
        if report_preferences is not None:
          self.report_preferences = report_preferences

    @property
    def report_mime_type(self):
        """
        Gets the report_mime_type of this ReportingV3ReportDefinitionsNameGet200ResponseDefaultSettings.
        Report Format Valid values:   - application/xml   - text/csv 

        :return: The report_mime_type of this ReportingV3ReportDefinitionsNameGet200ResponseDefaultSettings.
        :rtype: str
        """
        return self._report_mime_type

    @report_mime_type.setter
    def report_mime_type(self, report_mime_type):
        """
        Sets the report_mime_type of this ReportingV3ReportDefinitionsNameGet200ResponseDefaultSettings.
        Report Format Valid values:   - application/xml   - text/csv 

        :param report_mime_type: The report_mime_type of this ReportingV3ReportDefinitionsNameGet200ResponseDefaultSettings.
        :type: str
        """

        self._report_mime_type = report_mime_type

    @property
    def report_frequency(self):
        """
        Gets the report_frequency of this ReportingV3ReportDefinitionsNameGet200ResponseDefaultSettings.
        Report Frequency Value Valid Values:   - DAILY   - WEEKLY   - MONTHLY   - ADHOC 

        :return: The report_frequency of this ReportingV3ReportDefinitionsNameGet200ResponseDefaultSettings.
        :rtype: str
        """
        return self._report_frequency

    @report_frequency.setter
    def report_frequency(self, report_frequency):
        """
        Sets the report_frequency of this ReportingV3ReportDefinitionsNameGet200ResponseDefaultSettings.
        Report Frequency Value Valid Values:   - DAILY   - WEEKLY   - MONTHLY   - ADHOC 

        :param report_frequency: The report_frequency of this ReportingV3ReportDefinitionsNameGet200ResponseDefaultSettings.
        :type: str
        """

        self._report_frequency = report_frequency

    @property
    def report_name(self):
        """
        Gets the report_name of this ReportingV3ReportDefinitionsNameGet200ResponseDefaultSettings.
        Report Name

        :return: The report_name of this ReportingV3ReportDefinitionsNameGet200ResponseDefaultSettings.
        :rtype: str
        """
        return self._report_name

    @report_name.setter
    def report_name(self, report_name):
        """
        Sets the report_name of this ReportingV3ReportDefinitionsNameGet200ResponseDefaultSettings.
        Report Name

        :param report_name: The report_name of this ReportingV3ReportDefinitionsNameGet200ResponseDefaultSettings.
        :type: str
        """

        self._report_name = report_name

    @property
    def timezone(self):
        """
        Gets the timezone of this ReportingV3ReportDefinitionsNameGet200ResponseDefaultSettings.
        Time Zone

        :return: The timezone of this ReportingV3ReportDefinitionsNameGet200ResponseDefaultSettings.
        :rtype: str
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone):
        """
        Sets the timezone of this ReportingV3ReportDefinitionsNameGet200ResponseDefaultSettings.
        Time Zone

        :param timezone: The timezone of this ReportingV3ReportDefinitionsNameGet200ResponseDefaultSettings.
        :type: str
        """

        self._timezone = timezone

    @property
    def start_time(self):
        """
        Gets the start_time of this ReportingV3ReportDefinitionsNameGet200ResponseDefaultSettings.
        Start Time

        :return: The start_time of this ReportingV3ReportDefinitionsNameGet200ResponseDefaultSettings.
        :rtype: str
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """
        Sets the start_time of this ReportingV3ReportDefinitionsNameGet200ResponseDefaultSettings.
        Start Time

        :param start_time: The start_time of this ReportingV3ReportDefinitionsNameGet200ResponseDefaultSettings.
        :type: str
        """

        self._start_time = start_time

    @property
    def start_day(self):
        """
        Gets the start_day of this ReportingV3ReportDefinitionsNameGet200ResponseDefaultSettings.
        Start Day

        :return: The start_day of this ReportingV3ReportDefinitionsNameGet200ResponseDefaultSettings.
        :rtype: int
        """
        return self._start_day

    @start_day.setter
    def start_day(self, start_day):
        """
        Sets the start_day of this ReportingV3ReportDefinitionsNameGet200ResponseDefaultSettings.
        Start Day

        :param start_day: The start_day of this ReportingV3ReportDefinitionsNameGet200ResponseDefaultSettings.
        :type: int
        """

        self._start_day = start_day

    @property
    def report_filters(self):
        """
        Gets the report_filters of this ReportingV3ReportDefinitionsNameGet200ResponseDefaultSettings.
        List of filters to apply

        :return: The report_filters of this ReportingV3ReportDefinitionsNameGet200ResponseDefaultSettings.
        :rtype: dict(str, list[str])
        """
        return self._report_filters

    @report_filters.setter
    def report_filters(self, report_filters):
        """
        Sets the report_filters of this ReportingV3ReportDefinitionsNameGet200ResponseDefaultSettings.
        List of filters to apply

        :param report_filters: The report_filters of this ReportingV3ReportDefinitionsNameGet200ResponseDefaultSettings.
        :type: dict(str, list[str])
        """

        self._report_filters = report_filters

    @property
    def report_preferences(self):
        """
        Gets the report_preferences of this ReportingV3ReportDefinitionsNameGet200ResponseDefaultSettings.

        :return: The report_preferences of this ReportingV3ReportDefinitionsNameGet200ResponseDefaultSettings.
        :rtype: Reportingv3reportsReportPreferences
        """
        return self._report_preferences

    @report_preferences.setter
    def report_preferences(self, report_preferences):
        """
        Sets the report_preferences of this ReportingV3ReportDefinitionsNameGet200ResponseDefaultSettings.

        :param report_preferences: The report_preferences of this ReportingV3ReportDefinitionsNameGet200ResponseDefaultSettings.
        :type: Reportingv3reportsReportPreferences
        """

        self._report_preferences = report_preferences

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ReportingV3ReportDefinitionsNameGet200ResponseDefaultSettings):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
