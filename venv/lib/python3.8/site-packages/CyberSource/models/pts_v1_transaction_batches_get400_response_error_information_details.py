# coding: utf-8

"""
    CyberSource Merged Spec

    All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class PtsV1TransactionBatchesGet400ResponseErrorInformationDetails(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'field': 'str',
        'message': 'str'
    }

    attribute_map = {
        'field': 'field',
        'message': 'message'
    }

    def __init__(self, field=None, message=None):
        """
        PtsV1TransactionBatchesGet400ResponseErrorInformationDetails - a model defined in Swagger
        """

        self._field = None
        self._message = None

        if field is not None:
          self.field = field
        if message is not None:
          self.message = message

    @property
    def field(self):
        """
        Gets the field of this PtsV1TransactionBatchesGet400ResponseErrorInformationDetails.
        This is the flattened JSON object field name/path that is either missing or invalid. 

        :return: The field of this PtsV1TransactionBatchesGet400ResponseErrorInformationDetails.
        :rtype: str
        """
        return self._field

    @field.setter
    def field(self, field):
        """
        Sets the field of this PtsV1TransactionBatchesGet400ResponseErrorInformationDetails.
        This is the flattened JSON object field name/path that is either missing or invalid. 

        :param field: The field of this PtsV1TransactionBatchesGet400ResponseErrorInformationDetails.
        :type: str
        """

        self._field = field

    @property
    def message(self):
        """
        Gets the message of this PtsV1TransactionBatchesGet400ResponseErrorInformationDetails.
        The detailed message related to the status and reason listed above. 

        :return: The message of this PtsV1TransactionBatchesGet400ResponseErrorInformationDetails.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """
        Sets the message of this PtsV1TransactionBatchesGet400ResponseErrorInformationDetails.
        The detailed message related to the status and reason listed above. 

        :param message: The message of this PtsV1TransactionBatchesGet400ResponseErrorInformationDetails.
        :type: str
        """

        self._message = message

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, PtsV1TransactionBatchesGet400ResponseErrorInformationDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
