# coding: utf-8

"""
    CyberSource Merged Spec

    All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class FlexV1KeysPost200Response(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'key_id': 'str',
        'der': 'FlexV1KeysPost200ResponseDer',
        'jwk': 'FlexV1KeysPost200ResponseJwk'
    }

    attribute_map = {
        'key_id': 'keyId',
        'der': 'der',
        'jwk': 'jwk'
    }

    def __init__(self, key_id=None, der=None, jwk=None):
        """
        FlexV1KeysPost200Response - a model defined in Swagger
        """

        self._key_id = None
        self._der = None
        self._jwk = None

        if key_id is not None:
          self.key_id = key_id
        if der is not None:
          self.der = der
        if jwk is not None:
          self.jwk = jwk

    @property
    def key_id(self):
        """
        Gets the key_id of this FlexV1KeysPost200Response.
        Unique identifier for the generated token. Used in the subsequent Tokenize Card request from your customer’s device or browser.

        :return: The key_id of this FlexV1KeysPost200Response.
        :rtype: str
        """
        return self._key_id

    @key_id.setter
    def key_id(self, key_id):
        """
        Sets the key_id of this FlexV1KeysPost200Response.
        Unique identifier for the generated token. Used in the subsequent Tokenize Card request from your customer’s device or browser.

        :param key_id: The key_id of this FlexV1KeysPost200Response.
        :type: str
        """

        self._key_id = key_id

    @property
    def der(self):
        """
        Gets the der of this FlexV1KeysPost200Response.

        :return: The der of this FlexV1KeysPost200Response.
        :rtype: FlexV1KeysPost200ResponseDer
        """
        return self._der

    @der.setter
    def der(self, der):
        """
        Sets the der of this FlexV1KeysPost200Response.

        :param der: The der of this FlexV1KeysPost200Response.
        :type: FlexV1KeysPost200ResponseDer
        """

        self._der = der

    @property
    def jwk(self):
        """
        Gets the jwk of this FlexV1KeysPost200Response.

        :return: The jwk of this FlexV1KeysPost200Response.
        :rtype: FlexV1KeysPost200ResponseJwk
        """
        return self._jwk

    @jwk.setter
    def jwk(self, jwk):
        """
        Sets the jwk of this FlexV1KeysPost200Response.

        :param jwk: The jwk of this FlexV1KeysPost200Response.
        :type: FlexV1KeysPost200ResponseJwk
        """

        self._jwk = jwk

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, FlexV1KeysPost200Response):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
