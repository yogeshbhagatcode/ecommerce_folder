# coding: utf-8

"""
    CyberSource Merged Spec

    All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Ptsv2paymentsRiskInformationBuyerHistoryCustomerAccount(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'last_change_date': 'str',
        'creation_history': 'str',
        'modification_history': 'str',
        'password_history': 'str',
        'create_date': 'str',
        'password_change_date': 'str'
    }

    attribute_map = {
        'last_change_date': 'lastChangeDate',
        'creation_history': 'creationHistory',
        'modification_history': 'modificationHistory',
        'password_history': 'passwordHistory',
        'create_date': 'createDate',
        'password_change_date': 'passwordChangeDate'
    }

    def __init__(self, last_change_date=None, creation_history=None, modification_history=None, password_history=None, create_date=None, password_change_date=None):
        """
        Ptsv2paymentsRiskInformationBuyerHistoryCustomerAccount - a model defined in Swagger
        """

        self._last_change_date = None
        self._creation_history = None
        self._modification_history = None
        self._password_history = None
        self._create_date = None
        self._password_change_date = None

        if last_change_date is not None:
          self.last_change_date = last_change_date
        if creation_history is not None:
          self.creation_history = creation_history
        if modification_history is not None:
          self.modification_history = modification_history
        if password_history is not None:
          self.password_history = password_history
        if create_date is not None:
          self.create_date = create_date
        if password_change_date is not None:
          self.password_change_date = password_change_date

    @property
    def last_change_date(self):
        """
        Gets the last_change_date of this Ptsv2paymentsRiskInformationBuyerHistoryCustomerAccount.
        Date the cardholder’s account was last changed. This includes changes to the billing or shipping address, new payment accounts or new users added. Recommended for Discover ProtectBuy. 

        :return: The last_change_date of this Ptsv2paymentsRiskInformationBuyerHistoryCustomerAccount.
        :rtype: str
        """
        return self._last_change_date

    @last_change_date.setter
    def last_change_date(self, last_change_date):
        """
        Sets the last_change_date of this Ptsv2paymentsRiskInformationBuyerHistoryCustomerAccount.
        Date the cardholder’s account was last changed. This includes changes to the billing or shipping address, new payment accounts or new users added. Recommended for Discover ProtectBuy. 

        :param last_change_date: The last_change_date of this Ptsv2paymentsRiskInformationBuyerHistoryCustomerAccount.
        :type: str
        """
        if last_change_date is not None and len(last_change_date) > 10:
            raise ValueError("Invalid value for `last_change_date`, length must be less than or equal to `10`")

        self._last_change_date = last_change_date

    @property
    def creation_history(self):
        """
        Gets the creation_history of this Ptsv2paymentsRiskInformationBuyerHistoryCustomerAccount.
        The values from the enum can be: - GUEST - NEW_ACCOUNT - EXISTING_ACCOUNT 

        :return: The creation_history of this Ptsv2paymentsRiskInformationBuyerHistoryCustomerAccount.
        :rtype: str
        """
        return self._creation_history

    @creation_history.setter
    def creation_history(self, creation_history):
        """
        Sets the creation_history of this Ptsv2paymentsRiskInformationBuyerHistoryCustomerAccount.
        The values from the enum can be: - GUEST - NEW_ACCOUNT - EXISTING_ACCOUNT 

        :param creation_history: The creation_history of this Ptsv2paymentsRiskInformationBuyerHistoryCustomerAccount.
        :type: str
        """

        self._creation_history = creation_history

    @property
    def modification_history(self):
        """
        Gets the modification_history of this Ptsv2paymentsRiskInformationBuyerHistoryCustomerAccount.
        This field is applicable only in case of EXISTING_ACCOUNT in creationHistory. Possible values: - ACCOUNT_UPDATED_NOW - ACCOUNT_UPDATED_PAST 

        :return: The modification_history of this Ptsv2paymentsRiskInformationBuyerHistoryCustomerAccount.
        :rtype: str
        """
        return self._modification_history

    @modification_history.setter
    def modification_history(self, modification_history):
        """
        Sets the modification_history of this Ptsv2paymentsRiskInformationBuyerHistoryCustomerAccount.
        This field is applicable only in case of EXISTING_ACCOUNT in creationHistory. Possible values: - ACCOUNT_UPDATED_NOW - ACCOUNT_UPDATED_PAST 

        :param modification_history: The modification_history of this Ptsv2paymentsRiskInformationBuyerHistoryCustomerAccount.
        :type: str
        """

        self._modification_history = modification_history

    @property
    def password_history(self):
        """
        Gets the password_history of this Ptsv2paymentsRiskInformationBuyerHistoryCustomerAccount.
        This only applies for EXISTING_ACCOUNT in creationHistory. The values from the enum can be: - PASSWORD_CHANGED_NOW - PASSWORD_CHANGED_PAST - PASSWORD_NEVER_CHANGED 

        :return: The password_history of this Ptsv2paymentsRiskInformationBuyerHistoryCustomerAccount.
        :rtype: str
        """
        return self._password_history

    @password_history.setter
    def password_history(self, password_history):
        """
        Sets the password_history of this Ptsv2paymentsRiskInformationBuyerHistoryCustomerAccount.
        This only applies for EXISTING_ACCOUNT in creationHistory. The values from the enum can be: - PASSWORD_CHANGED_NOW - PASSWORD_CHANGED_PAST - PASSWORD_NEVER_CHANGED 

        :param password_history: The password_history of this Ptsv2paymentsRiskInformationBuyerHistoryCustomerAccount.
        :type: str
        """

        self._password_history = password_history

    @property
    def create_date(self):
        """
        Gets the create_date of this Ptsv2paymentsRiskInformationBuyerHistoryCustomerAccount.
        Date the cardholder opened the account. Recommended for Discover ProtectBuy. This only applies for EXISTING_ACCOUNT in creationHistory. 

        :return: The create_date of this Ptsv2paymentsRiskInformationBuyerHistoryCustomerAccount.
        :rtype: str
        """
        return self._create_date

    @create_date.setter
    def create_date(self, create_date):
        """
        Sets the create_date of this Ptsv2paymentsRiskInformationBuyerHistoryCustomerAccount.
        Date the cardholder opened the account. Recommended for Discover ProtectBuy. This only applies for EXISTING_ACCOUNT in creationHistory. 

        :param create_date: The create_date of this Ptsv2paymentsRiskInformationBuyerHistoryCustomerAccount.
        :type: str
        """
        if create_date is not None and len(create_date) > 10:
            raise ValueError("Invalid value for `create_date`, length must be less than or equal to `10`")

        self._create_date = create_date

    @property
    def password_change_date(self):
        """
        Gets the password_change_date of this Ptsv2paymentsRiskInformationBuyerHistoryCustomerAccount.
        Date the cardholder last changed or reset password on account. Recommended for Discover ProtectBuy. This only applies for PASSWORD_CHANGED_PAST in passwordHistory. 

        :return: The password_change_date of this Ptsv2paymentsRiskInformationBuyerHistoryCustomerAccount.
        :rtype: str
        """
        return self._password_change_date

    @password_change_date.setter
    def password_change_date(self, password_change_date):
        """
        Sets the password_change_date of this Ptsv2paymentsRiskInformationBuyerHistoryCustomerAccount.
        Date the cardholder last changed or reset password on account. Recommended for Discover ProtectBuy. This only applies for PASSWORD_CHANGED_PAST in passwordHistory. 

        :param password_change_date: The password_change_date of this Ptsv2paymentsRiskInformationBuyerHistoryCustomerAccount.
        :type: str
        """
        if password_change_date is not None and len(password_change_date) > 10:
            raise ValueError("Invalid value for `password_change_date`, length must be less than or equal to `10`")

        self._password_change_date = password_change_date

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Ptsv2paymentsRiskInformationBuyerHistoryCustomerAccount):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
