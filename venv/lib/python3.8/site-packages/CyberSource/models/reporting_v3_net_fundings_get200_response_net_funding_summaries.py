# coding: utf-8

"""
    CyberSource Merged Spec

    All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ReportingV3NetFundingsGet200ResponseNetFundingSummaries(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'str',
        'payment_sub_type': 'str',
        'conveyed_count': 'int',
        'conveyed_amount': 'str',
        'settled_count': 'int',
        'funded_count': 'int',
        'funded_amount': 'str',
        'currency_code': 'str'
    }

    attribute_map = {
        'type': 'type',
        'payment_sub_type': 'paymentSubType',
        'conveyed_count': 'conveyedCount',
        'conveyed_amount': 'conveyedAmount',
        'settled_count': 'settledCount',
        'funded_count': 'fundedCount',
        'funded_amount': 'fundedAmount',
        'currency_code': 'currencyCode'
    }

    def __init__(self, type=None, payment_sub_type=None, conveyed_count=None, conveyed_amount=None, settled_count=None, funded_count=None, funded_amount=None, currency_code=None):
        """
        ReportingV3NetFundingsGet200ResponseNetFundingSummaries - a model defined in Swagger
        """

        self._type = None
        self._payment_sub_type = None
        self._conveyed_count = None
        self._conveyed_amount = None
        self._settled_count = None
        self._funded_count = None
        self._funded_amount = None
        self._currency_code = None

        if type is not None:
          self.type = type
        if payment_sub_type is not None:
          self.payment_sub_type = payment_sub_type
        if conveyed_count is not None:
          self.conveyed_count = conveyed_count
        if conveyed_amount is not None:
          self.conveyed_amount = conveyed_amount
        if settled_count is not None:
          self.settled_count = settled_count
        if funded_count is not None:
          self.funded_count = funded_count
        if funded_amount is not None:
          self.funded_amount = funded_amount
        if currency_code is not None:
          self.currency_code = currency_code

    @property
    def type(self):
        """
        Gets the type of this ReportingV3NetFundingsGet200ResponseNetFundingSummaries.
        Valid values: - PURCHASES - REFUNDS - FEES - CHARGEBACKS 

        :return: The type of this ReportingV3NetFundingsGet200ResponseNetFundingSummaries.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this ReportingV3NetFundingsGet200ResponseNetFundingSummaries.
        Valid values: - PURCHASES - REFUNDS - FEES - CHARGEBACKS 

        :param type: The type of this ReportingV3NetFundingsGet200ResponseNetFundingSummaries.
        :type: str
        """

        self._type = type

    @property
    def payment_sub_type(self):
        """
        Gets the payment_sub_type of this ReportingV3NetFundingsGet200ResponseNetFundingSummaries.

        :return: The payment_sub_type of this ReportingV3NetFundingsGet200ResponseNetFundingSummaries.
        :rtype: str
        """
        return self._payment_sub_type

    @payment_sub_type.setter
    def payment_sub_type(self, payment_sub_type):
        """
        Sets the payment_sub_type of this ReportingV3NetFundingsGet200ResponseNetFundingSummaries.

        :param payment_sub_type: The payment_sub_type of this ReportingV3NetFundingsGet200ResponseNetFundingSummaries.
        :type: str
        """

        self._payment_sub_type = payment_sub_type

    @property
    def conveyed_count(self):
        """
        Gets the conveyed_count of this ReportingV3NetFundingsGet200ResponseNetFundingSummaries.

        :return: The conveyed_count of this ReportingV3NetFundingsGet200ResponseNetFundingSummaries.
        :rtype: int
        """
        return self._conveyed_count

    @conveyed_count.setter
    def conveyed_count(self, conveyed_count):
        """
        Sets the conveyed_count of this ReportingV3NetFundingsGet200ResponseNetFundingSummaries.

        :param conveyed_count: The conveyed_count of this ReportingV3NetFundingsGet200ResponseNetFundingSummaries.
        :type: int
        """

        self._conveyed_count = conveyed_count

    @property
    def conveyed_amount(self):
        """
        Gets the conveyed_amount of this ReportingV3NetFundingsGet200ResponseNetFundingSummaries.

        :return: The conveyed_amount of this ReportingV3NetFundingsGet200ResponseNetFundingSummaries.
        :rtype: str
        """
        return self._conveyed_amount

    @conveyed_amount.setter
    def conveyed_amount(self, conveyed_amount):
        """
        Sets the conveyed_amount of this ReportingV3NetFundingsGet200ResponseNetFundingSummaries.

        :param conveyed_amount: The conveyed_amount of this ReportingV3NetFundingsGet200ResponseNetFundingSummaries.
        :type: str
        """

        self._conveyed_amount = conveyed_amount

    @property
    def settled_count(self):
        """
        Gets the settled_count of this ReportingV3NetFundingsGet200ResponseNetFundingSummaries.

        :return: The settled_count of this ReportingV3NetFundingsGet200ResponseNetFundingSummaries.
        :rtype: int
        """
        return self._settled_count

    @settled_count.setter
    def settled_count(self, settled_count):
        """
        Sets the settled_count of this ReportingV3NetFundingsGet200ResponseNetFundingSummaries.

        :param settled_count: The settled_count of this ReportingV3NetFundingsGet200ResponseNetFundingSummaries.
        :type: int
        """

        self._settled_count = settled_count

    @property
    def funded_count(self):
        """
        Gets the funded_count of this ReportingV3NetFundingsGet200ResponseNetFundingSummaries.

        :return: The funded_count of this ReportingV3NetFundingsGet200ResponseNetFundingSummaries.
        :rtype: int
        """
        return self._funded_count

    @funded_count.setter
    def funded_count(self, funded_count):
        """
        Sets the funded_count of this ReportingV3NetFundingsGet200ResponseNetFundingSummaries.

        :param funded_count: The funded_count of this ReportingV3NetFundingsGet200ResponseNetFundingSummaries.
        :type: int
        """

        self._funded_count = funded_count

    @property
    def funded_amount(self):
        """
        Gets the funded_amount of this ReportingV3NetFundingsGet200ResponseNetFundingSummaries.

        :return: The funded_amount of this ReportingV3NetFundingsGet200ResponseNetFundingSummaries.
        :rtype: str
        """
        return self._funded_amount

    @funded_amount.setter
    def funded_amount(self, funded_amount):
        """
        Sets the funded_amount of this ReportingV3NetFundingsGet200ResponseNetFundingSummaries.

        :param funded_amount: The funded_amount of this ReportingV3NetFundingsGet200ResponseNetFundingSummaries.
        :type: str
        """

        self._funded_amount = funded_amount

    @property
    def currency_code(self):
        """
        Gets the currency_code of this ReportingV3NetFundingsGet200ResponseNetFundingSummaries.
        Valid ISO 4217 ALPHA-3 currency code

        :return: The currency_code of this ReportingV3NetFundingsGet200ResponseNetFundingSummaries.
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """
        Sets the currency_code of this ReportingV3NetFundingsGet200ResponseNetFundingSummaries.
        Valid ISO 4217 ALPHA-3 currency code

        :param currency_code: The currency_code of this ReportingV3NetFundingsGet200ResponseNetFundingSummaries.
        :type: str
        """

        self._currency_code = currency_code

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ReportingV3NetFundingsGet200ResponseNetFundingSummaries):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
