# coding: utf-8

"""
    CyberSource Merged Spec

    All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ReportingV3PurchaseRefundDetailsGet200ResponseSettlementStatuses(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'request_id': 'str',
        'status': 'str',
        'settlement_time': 'datetime',
        'reason_code': 'str',
        'error_text': 'str'
    }

    attribute_map = {
        'request_id': 'requestId',
        'status': 'status',
        'settlement_time': 'settlementTime',
        'reason_code': 'reasonCode',
        'error_text': 'errorText'
    }

    def __init__(self, request_id=None, status=None, settlement_time=None, reason_code=None, error_text=None):
        """
        ReportingV3PurchaseRefundDetailsGet200ResponseSettlementStatuses - a model defined in Swagger
        """

        self._request_id = None
        self._status = None
        self._settlement_time = None
        self._reason_code = None
        self._error_text = None

        if request_id is not None:
          self.request_id = request_id
        if status is not None:
          self.status = status
        if settlement_time is not None:
          self.settlement_time = settlement_time
        if reason_code is not None:
          self.reason_code = reason_code
        if error_text is not None:
          self.error_text = error_text

    @property
    def request_id(self):
        """
        Gets the request_id of this ReportingV3PurchaseRefundDetailsGet200ResponseSettlementStatuses.
        An unique identification number assigned by CyberSource to identify the submitted request.

        :return: The request_id of this ReportingV3PurchaseRefundDetailsGet200ResponseSettlementStatuses.
        :rtype: str
        """
        return self._request_id

    @request_id.setter
    def request_id(self, request_id):
        """
        Sets the request_id of this ReportingV3PurchaseRefundDetailsGet200ResponseSettlementStatuses.
        An unique identification number assigned by CyberSource to identify the submitted request.

        :param request_id: The request_id of this ReportingV3PurchaseRefundDetailsGet200ResponseSettlementStatuses.
        :type: str
        """
        if request_id is not None and len(request_id) > 26:
            raise ValueError("Invalid value for `request_id`, length must be less than or equal to `26`")

        self._request_id = request_id

    @property
    def status(self):
        """
        Gets the status of this ReportingV3PurchaseRefundDetailsGet200ResponseSettlementStatuses.
        Settlement Status

        :return: The status of this ReportingV3PurchaseRefundDetailsGet200ResponseSettlementStatuses.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this ReportingV3PurchaseRefundDetailsGet200ResponseSettlementStatuses.
        Settlement Status

        :param status: The status of this ReportingV3PurchaseRefundDetailsGet200ResponseSettlementStatuses.
        :type: str
        """

        self._status = status

    @property
    def settlement_time(self):
        """
        Gets the settlement_time of this ReportingV3PurchaseRefundDetailsGet200ResponseSettlementStatuses.
        Settlement Date

        :return: The settlement_time of this ReportingV3PurchaseRefundDetailsGet200ResponseSettlementStatuses.
        :rtype: datetime
        """
        return self._settlement_time

    @settlement_time.setter
    def settlement_time(self, settlement_time):
        """
        Sets the settlement_time of this ReportingV3PurchaseRefundDetailsGet200ResponseSettlementStatuses.
        Settlement Date

        :param settlement_time: The settlement_time of this ReportingV3PurchaseRefundDetailsGet200ResponseSettlementStatuses.
        :type: datetime
        """

        self._settlement_time = settlement_time

    @property
    def reason_code(self):
        """
        Gets the reason_code of this ReportingV3PurchaseRefundDetailsGet200ResponseSettlementStatuses.
        ReasonCode

        :return: The reason_code of this ReportingV3PurchaseRefundDetailsGet200ResponseSettlementStatuses.
        :rtype: str
        """
        return self._reason_code

    @reason_code.setter
    def reason_code(self, reason_code):
        """
        Sets the reason_code of this ReportingV3PurchaseRefundDetailsGet200ResponseSettlementStatuses.
        ReasonCode

        :param reason_code: The reason_code of this ReportingV3PurchaseRefundDetailsGet200ResponseSettlementStatuses.
        :type: str
        """

        self._reason_code = reason_code

    @property
    def error_text(self):
        """
        Gets the error_text of this ReportingV3PurchaseRefundDetailsGet200ResponseSettlementStatuses.
        errorText

        :return: The error_text of this ReportingV3PurchaseRefundDetailsGet200ResponseSettlementStatuses.
        :rtype: str
        """
        return self._error_text

    @error_text.setter
    def error_text(self, error_text):
        """
        Sets the error_text of this ReportingV3PurchaseRefundDetailsGet200ResponseSettlementStatuses.
        errorText

        :param error_text: The error_text of this ReportingV3PurchaseRefundDetailsGet200ResponseSettlementStatuses.
        :type: str
        """

        self._error_text = error_text

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ReportingV3PurchaseRefundDetailsGet200ResponseSettlementStatuses):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
