# coding: utf-8

"""
    CyberSource Merged Spec

    All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class RiskV1ExportComplianceInquiriesPost201ResponseExportComplianceInformationWatchListMatches(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'addresses': 'list[str]',
        'sanction_list': 'str',
        'aliases': 'list[str]',
        'programs': 'list[str]'
    }

    attribute_map = {
        'addresses': 'addresses',
        'sanction_list': 'sanctionList',
        'aliases': 'aliases',
        'programs': 'programs'
    }

    def __init__(self, addresses=None, sanction_list=None, aliases=None, programs=None):
        """
        RiskV1ExportComplianceInquiriesPost201ResponseExportComplianceInformationWatchListMatches - a model defined in Swagger
        """

        self._addresses = None
        self._sanction_list = None
        self._aliases = None
        self._programs = None

        if addresses is not None:
          self.addresses = addresses
        if sanction_list is not None:
          self.sanction_list = sanction_list
        if aliases is not None:
          self.aliases = aliases
        if programs is not None:
          self.programs = programs

    @property
    def addresses(self):
        """
        Gets the addresses of this RiskV1ExportComplianceInquiriesPost201ResponseExportComplianceInformationWatchListMatches.
        Address found on the list specified in export_matchN_list for the entity (name and address) in the request. 

        :return: The addresses of this RiskV1ExportComplianceInquiriesPost201ResponseExportComplianceInformationWatchListMatches.
        :rtype: list[str]
        """
        return self._addresses

    @addresses.setter
    def addresses(self, addresses):
        """
        Sets the addresses of this RiskV1ExportComplianceInquiriesPost201ResponseExportComplianceInformationWatchListMatches.
        Address found on the list specified in export_matchN_list for the entity (name and address) in the request. 

        :param addresses: The addresses of this RiskV1ExportComplianceInquiriesPost201ResponseExportComplianceInformationWatchListMatches.
        :type: list[str]
        """

        self._addresses = addresses

    @property
    def sanction_list(self):
        """
        Gets the sanction_list of this RiskV1ExportComplianceInquiriesPost201ResponseExportComplianceInformationWatchListMatches.
        List on which the first Denied Parties List check match appears. For a list of codes, see \"Denied Parties List Check Codes,\" page 56. 

        :return: The sanction_list of this RiskV1ExportComplianceInquiriesPost201ResponseExportComplianceInformationWatchListMatches.
        :rtype: str
        """
        return self._sanction_list

    @sanction_list.setter
    def sanction_list(self, sanction_list):
        """
        Sets the sanction_list of this RiskV1ExportComplianceInquiriesPost201ResponseExportComplianceInformationWatchListMatches.
        List on which the first Denied Parties List check match appears. For a list of codes, see \"Denied Parties List Check Codes,\" page 56. 

        :param sanction_list: The sanction_list of this RiskV1ExportComplianceInquiriesPost201ResponseExportComplianceInformationWatchListMatches.
        :type: str
        """
        if sanction_list is not None and len(sanction_list) > 255:
            raise ValueError("Invalid value for `sanction_list`, length must be less than or equal to `255`")

        self._sanction_list = sanction_list

    @property
    def aliases(self):
        """
        Gets the aliases of this RiskV1ExportComplianceInquiriesPost201ResponseExportComplianceInformationWatchListMatches.
        Name found on the list specified in export_matchN_list for the entity (name and address) in the request. 

        :return: The aliases of this RiskV1ExportComplianceInquiriesPost201ResponseExportComplianceInformationWatchListMatches.
        :rtype: list[str]
        """
        return self._aliases

    @aliases.setter
    def aliases(self, aliases):
        """
        Sets the aliases of this RiskV1ExportComplianceInquiriesPost201ResponseExportComplianceInformationWatchListMatches.
        Name found on the list specified in export_matchN_list for the entity (name and address) in the request. 

        :param aliases: The aliases of this RiskV1ExportComplianceInquiriesPost201ResponseExportComplianceInformationWatchListMatches.
        :type: list[str]
        """

        self._aliases = aliases

    @property
    def programs(self):
        """
        Gets the programs of this RiskV1ExportComplianceInquiriesPost201ResponseExportComplianceInformationWatchListMatches.
        Sub-lists matched by the order data. List members are separated by carets (^).

        :return: The programs of this RiskV1ExportComplianceInquiriesPost201ResponseExportComplianceInformationWatchListMatches.
        :rtype: list[str]
        """
        return self._programs

    @programs.setter
    def programs(self, programs):
        """
        Sets the programs of this RiskV1ExportComplianceInquiriesPost201ResponseExportComplianceInformationWatchListMatches.
        Sub-lists matched by the order data. List members are separated by carets (^).

        :param programs: The programs of this RiskV1ExportComplianceInquiriesPost201ResponseExportComplianceInformationWatchListMatches.
        :type: list[str]
        """

        self._programs = programs

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, RiskV1ExportComplianceInquiriesPost201ResponseExportComplianceInformationWatchListMatches):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
