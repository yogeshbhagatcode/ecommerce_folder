# coding: utf-8

"""
    CyberSource Merged Spec

    All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ReportingV3PurchaseRefundDetailsGet200ResponseOthers(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'request_id': 'str',
        'merchant_data1': 'str',
        'merchant_data2': 'str',
        'merchant_data3': 'str',
        'merchant_data4': 'str',
        'first_name': 'str',
        'last_name': 'str'
    }

    attribute_map = {
        'request_id': 'requestId',
        'merchant_data1': 'merchantData1',
        'merchant_data2': 'merchantData2',
        'merchant_data3': 'merchantData3',
        'merchant_data4': 'merchantData4',
        'first_name': 'firstName',
        'last_name': 'lastName'
    }

    def __init__(self, request_id=None, merchant_data1=None, merchant_data2=None, merchant_data3=None, merchant_data4=None, first_name=None, last_name=None):
        """
        ReportingV3PurchaseRefundDetailsGet200ResponseOthers - a model defined in Swagger
        """

        self._request_id = None
        self._merchant_data1 = None
        self._merchant_data2 = None
        self._merchant_data3 = None
        self._merchant_data4 = None
        self._first_name = None
        self._last_name = None

        if request_id is not None:
          self.request_id = request_id
        if merchant_data1 is not None:
          self.merchant_data1 = merchant_data1
        if merchant_data2 is not None:
          self.merchant_data2 = merchant_data2
        if merchant_data3 is not None:
          self.merchant_data3 = merchant_data3
        if merchant_data4 is not None:
          self.merchant_data4 = merchant_data4
        if first_name is not None:
          self.first_name = first_name
        if last_name is not None:
          self.last_name = last_name

    @property
    def request_id(self):
        """
        Gets the request_id of this ReportingV3PurchaseRefundDetailsGet200ResponseOthers.
        An unique identification number assigned by CyberSource to identify the submitted request.

        :return: The request_id of this ReportingV3PurchaseRefundDetailsGet200ResponseOthers.
        :rtype: str
        """
        return self._request_id

    @request_id.setter
    def request_id(self, request_id):
        """
        Sets the request_id of this ReportingV3PurchaseRefundDetailsGet200ResponseOthers.
        An unique identification number assigned by CyberSource to identify the submitted request.

        :param request_id: The request_id of this ReportingV3PurchaseRefundDetailsGet200ResponseOthers.
        :type: str
        """
        if request_id is not None and len(request_id) > 26:
            raise ValueError("Invalid value for `request_id`, length must be less than or equal to `26`")

        self._request_id = request_id

    @property
    def merchant_data1(self):
        """
        Gets the merchant_data1 of this ReportingV3PurchaseRefundDetailsGet200ResponseOthers.
        Merchant Defined Data

        :return: The merchant_data1 of this ReportingV3PurchaseRefundDetailsGet200ResponseOthers.
        :rtype: str
        """
        return self._merchant_data1

    @merchant_data1.setter
    def merchant_data1(self, merchant_data1):
        """
        Sets the merchant_data1 of this ReportingV3PurchaseRefundDetailsGet200ResponseOthers.
        Merchant Defined Data

        :param merchant_data1: The merchant_data1 of this ReportingV3PurchaseRefundDetailsGet200ResponseOthers.
        :type: str
        """

        self._merchant_data1 = merchant_data1

    @property
    def merchant_data2(self):
        """
        Gets the merchant_data2 of this ReportingV3PurchaseRefundDetailsGet200ResponseOthers.
        Merchant Defined Data

        :return: The merchant_data2 of this ReportingV3PurchaseRefundDetailsGet200ResponseOthers.
        :rtype: str
        """
        return self._merchant_data2

    @merchant_data2.setter
    def merchant_data2(self, merchant_data2):
        """
        Sets the merchant_data2 of this ReportingV3PurchaseRefundDetailsGet200ResponseOthers.
        Merchant Defined Data

        :param merchant_data2: The merchant_data2 of this ReportingV3PurchaseRefundDetailsGet200ResponseOthers.
        :type: str
        """

        self._merchant_data2 = merchant_data2

    @property
    def merchant_data3(self):
        """
        Gets the merchant_data3 of this ReportingV3PurchaseRefundDetailsGet200ResponseOthers.
        Merchant Defined Data

        :return: The merchant_data3 of this ReportingV3PurchaseRefundDetailsGet200ResponseOthers.
        :rtype: str
        """
        return self._merchant_data3

    @merchant_data3.setter
    def merchant_data3(self, merchant_data3):
        """
        Sets the merchant_data3 of this ReportingV3PurchaseRefundDetailsGet200ResponseOthers.
        Merchant Defined Data

        :param merchant_data3: The merchant_data3 of this ReportingV3PurchaseRefundDetailsGet200ResponseOthers.
        :type: str
        """

        self._merchant_data3 = merchant_data3

    @property
    def merchant_data4(self):
        """
        Gets the merchant_data4 of this ReportingV3PurchaseRefundDetailsGet200ResponseOthers.
        Merchant Defined Data

        :return: The merchant_data4 of this ReportingV3PurchaseRefundDetailsGet200ResponseOthers.
        :rtype: str
        """
        return self._merchant_data4

    @merchant_data4.setter
    def merchant_data4(self, merchant_data4):
        """
        Sets the merchant_data4 of this ReportingV3PurchaseRefundDetailsGet200ResponseOthers.
        Merchant Defined Data

        :param merchant_data4: The merchant_data4 of this ReportingV3PurchaseRefundDetailsGet200ResponseOthers.
        :type: str
        """

        self._merchant_data4 = merchant_data4

    @property
    def first_name(self):
        """
        Gets the first_name of this ReportingV3PurchaseRefundDetailsGet200ResponseOthers.
        First Name

        :return: The first_name of this ReportingV3PurchaseRefundDetailsGet200ResponseOthers.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """
        Sets the first_name of this ReportingV3PurchaseRefundDetailsGet200ResponseOthers.
        First Name

        :param first_name: The first_name of this ReportingV3PurchaseRefundDetailsGet200ResponseOthers.
        :type: str
        """

        self._first_name = first_name

    @property
    def last_name(self):
        """
        Gets the last_name of this ReportingV3PurchaseRefundDetailsGet200ResponseOthers.
        Last Name

        :return: The last_name of this ReportingV3PurchaseRefundDetailsGet200ResponseOthers.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """
        Sets the last_name of this ReportingV3PurchaseRefundDetailsGet200ResponseOthers.
        Last Name

        :param last_name: The last_name of this ReportingV3PurchaseRefundDetailsGet200ResponseOthers.
        :type: str
        """

        self._last_name = last_name

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ReportingV3PurchaseRefundDetailsGet200ResponseOthers):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
