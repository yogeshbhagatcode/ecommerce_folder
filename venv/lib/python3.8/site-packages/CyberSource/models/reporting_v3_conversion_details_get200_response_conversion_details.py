# coding: utf-8

"""
    CyberSource Merged Spec

    All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ReportingV3ConversionDetailsGet200ResponseConversionDetails(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'merchant_reference_number': 'str',
        'conversion_time': 'datetime',
        'request_id': 'str',
        'original_decision': 'str',
        'new_decision': 'str',
        'reviewer': 'str',
        'reviewer_comments': 'str',
        'queue': 'str',
        'profile': 'str',
        'notes': 'list[ReportingV3ConversionDetailsGet200ResponseNotes]'
    }

    attribute_map = {
        'merchant_reference_number': 'merchantReferenceNumber',
        'conversion_time': 'conversionTime',
        'request_id': 'requestId',
        'original_decision': 'originalDecision',
        'new_decision': 'newDecision',
        'reviewer': 'reviewer',
        'reviewer_comments': 'reviewerComments',
        'queue': 'queue',
        'profile': 'profile',
        'notes': 'notes'
    }

    def __init__(self, merchant_reference_number=None, conversion_time=None, request_id=None, original_decision=None, new_decision=None, reviewer=None, reviewer_comments=None, queue=None, profile=None, notes=None):
        """
        ReportingV3ConversionDetailsGet200ResponseConversionDetails - a model defined in Swagger
        """

        self._merchant_reference_number = None
        self._conversion_time = None
        self._request_id = None
        self._original_decision = None
        self._new_decision = None
        self._reviewer = None
        self._reviewer_comments = None
        self._queue = None
        self._profile = None
        self._notes = None

        if merchant_reference_number is not None:
          self.merchant_reference_number = merchant_reference_number
        if conversion_time is not None:
          self.conversion_time = conversion_time
        if request_id is not None:
          self.request_id = request_id
        if original_decision is not None:
          self.original_decision = original_decision
        if new_decision is not None:
          self.new_decision = new_decision
        if reviewer is not None:
          self.reviewer = reviewer
        if reviewer_comments is not None:
          self.reviewer_comments = reviewer_comments
        if queue is not None:
          self.queue = queue
        if profile is not None:
          self.profile = profile
        if notes is not None:
          self.notes = notes

    @property
    def merchant_reference_number(self):
        """
        Gets the merchant_reference_number of this ReportingV3ConversionDetailsGet200ResponseConversionDetails.
        Merchant reference number of a merchant

        :return: The merchant_reference_number of this ReportingV3ConversionDetailsGet200ResponseConversionDetails.
        :rtype: str
        """
        return self._merchant_reference_number

    @merchant_reference_number.setter
    def merchant_reference_number(self, merchant_reference_number):
        """
        Sets the merchant_reference_number of this ReportingV3ConversionDetailsGet200ResponseConversionDetails.
        Merchant reference number of a merchant

        :param merchant_reference_number: The merchant_reference_number of this ReportingV3ConversionDetailsGet200ResponseConversionDetails.
        :type: str
        """

        self._merchant_reference_number = merchant_reference_number

    @property
    def conversion_time(self):
        """
        Gets the conversion_time of this ReportingV3ConversionDetailsGet200ResponseConversionDetails.
        Date of conversion

        :return: The conversion_time of this ReportingV3ConversionDetailsGet200ResponseConversionDetails.
        :rtype: datetime
        """
        return self._conversion_time

    @conversion_time.setter
    def conversion_time(self, conversion_time):
        """
        Sets the conversion_time of this ReportingV3ConversionDetailsGet200ResponseConversionDetails.
        Date of conversion

        :param conversion_time: The conversion_time of this ReportingV3ConversionDetailsGet200ResponseConversionDetails.
        :type: datetime
        """

        self._conversion_time = conversion_time

    @property
    def request_id(self):
        """
        Gets the request_id of this ReportingV3ConversionDetailsGet200ResponseConversionDetails.
        Cybersource Transation request id

        :return: The request_id of this ReportingV3ConversionDetailsGet200ResponseConversionDetails.
        :rtype: str
        """
        return self._request_id

    @request_id.setter
    def request_id(self, request_id):
        """
        Sets the request_id of this ReportingV3ConversionDetailsGet200ResponseConversionDetails.
        Cybersource Transation request id

        :param request_id: The request_id of this ReportingV3ConversionDetailsGet200ResponseConversionDetails.
        :type: str
        """

        self._request_id = request_id

    @property
    def original_decision(self):
        """
        Gets the original_decision of this ReportingV3ConversionDetailsGet200ResponseConversionDetails.
        Original decision

        :return: The original_decision of this ReportingV3ConversionDetailsGet200ResponseConversionDetails.
        :rtype: str
        """
        return self._original_decision

    @original_decision.setter
    def original_decision(self, original_decision):
        """
        Sets the original_decision of this ReportingV3ConversionDetailsGet200ResponseConversionDetails.
        Original decision

        :param original_decision: The original_decision of this ReportingV3ConversionDetailsGet200ResponseConversionDetails.
        :type: str
        """

        self._original_decision = original_decision

    @property
    def new_decision(self):
        """
        Gets the new_decision of this ReportingV3ConversionDetailsGet200ResponseConversionDetails.
        New decision

        :return: The new_decision of this ReportingV3ConversionDetailsGet200ResponseConversionDetails.
        :rtype: str
        """
        return self._new_decision

    @new_decision.setter
    def new_decision(self, new_decision):
        """
        Sets the new_decision of this ReportingV3ConversionDetailsGet200ResponseConversionDetails.
        New decision

        :param new_decision: The new_decision of this ReportingV3ConversionDetailsGet200ResponseConversionDetails.
        :type: str
        """

        self._new_decision = new_decision

    @property
    def reviewer(self):
        """
        Gets the reviewer of this ReportingV3ConversionDetailsGet200ResponseConversionDetails.
        User name of the reviewer

        :return: The reviewer of this ReportingV3ConversionDetailsGet200ResponseConversionDetails.
        :rtype: str
        """
        return self._reviewer

    @reviewer.setter
    def reviewer(self, reviewer):
        """
        Sets the reviewer of this ReportingV3ConversionDetailsGet200ResponseConversionDetails.
        User name of the reviewer

        :param reviewer: The reviewer of this ReportingV3ConversionDetailsGet200ResponseConversionDetails.
        :type: str
        """

        self._reviewer = reviewer

    @property
    def reviewer_comments(self):
        """
        Gets the reviewer_comments of this ReportingV3ConversionDetailsGet200ResponseConversionDetails.
        Comments of the reviewer

        :return: The reviewer_comments of this ReportingV3ConversionDetailsGet200ResponseConversionDetails.
        :rtype: str
        """
        return self._reviewer_comments

    @reviewer_comments.setter
    def reviewer_comments(self, reviewer_comments):
        """
        Sets the reviewer_comments of this ReportingV3ConversionDetailsGet200ResponseConversionDetails.
        Comments of the reviewer

        :param reviewer_comments: The reviewer_comments of this ReportingV3ConversionDetailsGet200ResponseConversionDetails.
        :type: str
        """

        self._reviewer_comments = reviewer_comments

    @property
    def queue(self):
        """
        Gets the queue of this ReportingV3ConversionDetailsGet200ResponseConversionDetails.
        Name of the queue

        :return: The queue of this ReportingV3ConversionDetailsGet200ResponseConversionDetails.
        :rtype: str
        """
        return self._queue

    @queue.setter
    def queue(self, queue):
        """
        Sets the queue of this ReportingV3ConversionDetailsGet200ResponseConversionDetails.
        Name of the queue

        :param queue: The queue of this ReportingV3ConversionDetailsGet200ResponseConversionDetails.
        :type: str
        """

        self._queue = queue

    @property
    def profile(self):
        """
        Gets the profile of this ReportingV3ConversionDetailsGet200ResponseConversionDetails.
        Name of the profile

        :return: The profile of this ReportingV3ConversionDetailsGet200ResponseConversionDetails.
        :rtype: str
        """
        return self._profile

    @profile.setter
    def profile(self, profile):
        """
        Sets the profile of this ReportingV3ConversionDetailsGet200ResponseConversionDetails.
        Name of the profile

        :param profile: The profile of this ReportingV3ConversionDetailsGet200ResponseConversionDetails.
        :type: str
        """

        self._profile = profile

    @property
    def notes(self):
        """
        Gets the notes of this ReportingV3ConversionDetailsGet200ResponseConversionDetails.

        :return: The notes of this ReportingV3ConversionDetailsGet200ResponseConversionDetails.
        :rtype: list[ReportingV3ConversionDetailsGet200ResponseNotes]
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """
        Sets the notes of this ReportingV3ConversionDetailsGet200ResponseConversionDetails.

        :param notes: The notes of this ReportingV3ConversionDetailsGet200ResponseConversionDetails.
        :type: list[ReportingV3ConversionDetailsGet200ResponseNotes]
        """

        self._notes = notes

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ReportingV3ConversionDetailsGet200ResponseConversionDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
