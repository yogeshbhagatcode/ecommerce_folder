# coding: utf-8

"""
    CyberSource Merged Spec

    All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Riskv1authenticationsBuyerInformation(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'personal_identification': 'list[Ptsv2paymentsBuyerInformationPersonalIdentification]',
        'mobile_phone': 'int'
    }

    attribute_map = {
        'personal_identification': 'personalIdentification',
        'mobile_phone': 'mobilePhone'
    }

    def __init__(self, personal_identification=None, mobile_phone=None):
        """
        Riskv1authenticationsBuyerInformation - a model defined in Swagger
        """

        self._personal_identification = None
        self._mobile_phone = None

        if personal_identification is not None:
          self.personal_identification = personal_identification
        self.mobile_phone = mobile_phone

    @property
    def personal_identification(self):
        """
        Gets the personal_identification of this Riskv1authenticationsBuyerInformation.
        This array contains detailed information about the buyer's form of persoanl identification.

        :return: The personal_identification of this Riskv1authenticationsBuyerInformation.
        :rtype: list[Ptsv2paymentsBuyerInformationPersonalIdentification]
        """
        return self._personal_identification

    @personal_identification.setter
    def personal_identification(self, personal_identification):
        """
        Sets the personal_identification of this Riskv1authenticationsBuyerInformation.
        This array contains detailed information about the buyer's form of persoanl identification.

        :param personal_identification: The personal_identification of this Riskv1authenticationsBuyerInformation.
        :type: list[Ptsv2paymentsBuyerInformationPersonalIdentification]
        """

        self._personal_identification = personal_identification

    @property
    def mobile_phone(self):
        """
        Gets the mobile_phone of this Riskv1authenticationsBuyerInformation.
        Cardholder’s mobile phone number. **Important** Required for Visa Secure transactions in Brazil. Do not use this request field for any other types of transactions. 

        :return: The mobile_phone of this Riskv1authenticationsBuyerInformation.
        :rtype: int
        """
        return self._mobile_phone

    @mobile_phone.setter
    def mobile_phone(self, mobile_phone):
        """
        Sets the mobile_phone of this Riskv1authenticationsBuyerInformation.
        Cardholder’s mobile phone number. **Important** Required for Visa Secure transactions in Brazil. Do not use this request field for any other types of transactions. 

        :param mobile_phone: The mobile_phone of this Riskv1authenticationsBuyerInformation.
        :type: int
        """
        if mobile_phone is None:
            raise ValueError("Invalid value for `mobile_phone`, must not be `None`")

        self._mobile_phone = mobile_phone

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Riskv1authenticationsBuyerInformation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
