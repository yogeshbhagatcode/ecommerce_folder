# coding: utf-8

"""
    CyberSource Merged Spec

    All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class RiskV1AuthenticationSetupsPost201ResponseConsumerAuthenticationInformation(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'access_token': 'str',
        'reference_id': 'str',
        'device_data_collection_url': 'str'
    }

    attribute_map = {
        'access_token': 'accessToken',
        'reference_id': 'referenceId',
        'device_data_collection_url': 'deviceDataCollectionUrl'
    }

    def __init__(self, access_token=None, reference_id=None, device_data_collection_url=None):
        """
        RiskV1AuthenticationSetupsPost201ResponseConsumerAuthenticationInformation - a model defined in Swagger
        """

        self._access_token = None
        self._reference_id = None
        self._device_data_collection_url = None

        if access_token is not None:
          self.access_token = access_token
        if reference_id is not None:
          self.reference_id = reference_id
        if device_data_collection_url is not None:
          self.device_data_collection_url = device_data_collection_url

    @property
    def access_token(self):
        """
        Gets the access_token of this RiskV1AuthenticationSetupsPost201ResponseConsumerAuthenticationInformation.
        JSON Web Token (JWT) used to authenticate the consumer with the authentication provider, such as, CardinalCommerce or Rupay. 

        :return: The access_token of this RiskV1AuthenticationSetupsPost201ResponseConsumerAuthenticationInformation.
        :rtype: str
        """
        return self._access_token

    @access_token.setter
    def access_token(self, access_token):
        """
        Sets the access_token of this RiskV1AuthenticationSetupsPost201ResponseConsumerAuthenticationInformation.
        JSON Web Token (JWT) used to authenticate the consumer with the authentication provider, such as, CardinalCommerce or Rupay. 

        :param access_token: The access_token of this RiskV1AuthenticationSetupsPost201ResponseConsumerAuthenticationInformation.
        :type: str
        """

        self._access_token = access_token

    @property
    def reference_id(self):
        """
        Gets the reference_id of this RiskV1AuthenticationSetupsPost201ResponseConsumerAuthenticationInformation.
        This identifier represents cardinal has started device data collection session and this must be passed in Authentication JWT to Cardinal when invoking the deviceDataCollectionUrl. 

        :return: The reference_id of this RiskV1AuthenticationSetupsPost201ResponseConsumerAuthenticationInformation.
        :rtype: str
        """
        return self._reference_id

    @reference_id.setter
    def reference_id(self, reference_id):
        """
        Sets the reference_id of this RiskV1AuthenticationSetupsPost201ResponseConsumerAuthenticationInformation.
        This identifier represents cardinal has started device data collection session and this must be passed in Authentication JWT to Cardinal when invoking the deviceDataCollectionUrl. 

        :param reference_id: The reference_id of this RiskV1AuthenticationSetupsPost201ResponseConsumerAuthenticationInformation.
        :type: str
        """
        if reference_id is not None and len(reference_id) > 50:
            raise ValueError("Invalid value for `reference_id`, length must be less than or equal to `50`")

        self._reference_id = reference_id

    @property
    def device_data_collection_url(self):
        """
        Gets the device_data_collection_url of this RiskV1AuthenticationSetupsPost201ResponseConsumerAuthenticationInformation.
        The deviceDataCollectionUrl is the location to send the Authentication JWT when invoking the Device Data collection process. 

        :return: The device_data_collection_url of this RiskV1AuthenticationSetupsPost201ResponseConsumerAuthenticationInformation.
        :rtype: str
        """
        return self._device_data_collection_url

    @device_data_collection_url.setter
    def device_data_collection_url(self, device_data_collection_url):
        """
        Sets the device_data_collection_url of this RiskV1AuthenticationSetupsPost201ResponseConsumerAuthenticationInformation.
        The deviceDataCollectionUrl is the location to send the Authentication JWT when invoking the Device Data collection process. 

        :param device_data_collection_url: The device_data_collection_url of this RiskV1AuthenticationSetupsPost201ResponseConsumerAuthenticationInformation.
        :type: str
        """
        if device_data_collection_url is not None and len(device_data_collection_url) > 100:
            raise ValueError("Invalid value for `device_data_collection_url`, length must be less than or equal to `100`")

        self._device_data_collection_url = device_data_collection_url

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, RiskV1AuthenticationSetupsPost201ResponseConsumerAuthenticationInformation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
