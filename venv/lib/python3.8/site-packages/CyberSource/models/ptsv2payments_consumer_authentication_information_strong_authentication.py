# coding: utf-8

"""
    CyberSource Merged Spec

    All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Ptsv2paymentsConsumerAuthenticationInformationStrongAuthentication(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'low_value_exemption_indicator': 'str',
        'risk_analysis_exemption_indicator': 'str',
        'trusted_merchant_exemption_indicator': 'str',
        'secure_corporate_payment_indicator': 'str',
        'delegated_authentication_exemption_indicator': 'str',
        'authentication_indicator': 'str'
    }

    attribute_map = {
        'low_value_exemption_indicator': 'lowValueExemptionIndicator',
        'risk_analysis_exemption_indicator': 'riskAnalysisExemptionIndicator',
        'trusted_merchant_exemption_indicator': 'trustedMerchantExemptionIndicator',
        'secure_corporate_payment_indicator': 'secureCorporatePaymentIndicator',
        'delegated_authentication_exemption_indicator': 'delegatedAuthenticationExemptionIndicator',
        'authentication_indicator': 'authenticationIndicator'
    }

    def __init__(self, low_value_exemption_indicator=None, risk_analysis_exemption_indicator=None, trusted_merchant_exemption_indicator=None, secure_corporate_payment_indicator=None, delegated_authentication_exemption_indicator=None, authentication_indicator=None):
        """
        Ptsv2paymentsConsumerAuthenticationInformationStrongAuthentication - a model defined in Swagger
        """

        self._low_value_exemption_indicator = None
        self._risk_analysis_exemption_indicator = None
        self._trusted_merchant_exemption_indicator = None
        self._secure_corporate_payment_indicator = None
        self._delegated_authentication_exemption_indicator = None
        self._authentication_indicator = None

        if low_value_exemption_indicator is not None:
          self.low_value_exemption_indicator = low_value_exemption_indicator
        if risk_analysis_exemption_indicator is not None:
          self.risk_analysis_exemption_indicator = risk_analysis_exemption_indicator
        if trusted_merchant_exemption_indicator is not None:
          self.trusted_merchant_exemption_indicator = trusted_merchant_exemption_indicator
        if secure_corporate_payment_indicator is not None:
          self.secure_corporate_payment_indicator = secure_corporate_payment_indicator
        if delegated_authentication_exemption_indicator is not None:
          self.delegated_authentication_exemption_indicator = delegated_authentication_exemption_indicator
        if authentication_indicator is not None:
          self.authentication_indicator = authentication_indicator

    @property
    def low_value_exemption_indicator(self):
        """
        Gets the low_value_exemption_indicator of this Ptsv2paymentsConsumerAuthenticationInformationStrongAuthentication.
        This field will contain the low value exemption indicator with one of the following values: Possible values: - `0`  ( low value exemption does not apply to the transaction) - `1` (Transaction exempt from SCA as the merchant/acquirer has determined it to be a low value payment) 

        :return: The low_value_exemption_indicator of this Ptsv2paymentsConsumerAuthenticationInformationStrongAuthentication.
        :rtype: str
        """
        return self._low_value_exemption_indicator

    @low_value_exemption_indicator.setter
    def low_value_exemption_indicator(self, low_value_exemption_indicator):
        """
        Sets the low_value_exemption_indicator of this Ptsv2paymentsConsumerAuthenticationInformationStrongAuthentication.
        This field will contain the low value exemption indicator with one of the following values: Possible values: - `0`  ( low value exemption does not apply to the transaction) - `1` (Transaction exempt from SCA as the merchant/acquirer has determined it to be a low value payment) 

        :param low_value_exemption_indicator: The low_value_exemption_indicator of this Ptsv2paymentsConsumerAuthenticationInformationStrongAuthentication.
        :type: str
        """
        if low_value_exemption_indicator is not None and len(low_value_exemption_indicator) > 1:
            raise ValueError("Invalid value for `low_value_exemption_indicator`, length must be less than or equal to `1`")

        self._low_value_exemption_indicator = low_value_exemption_indicator

    @property
    def risk_analysis_exemption_indicator(self):
        """
        Gets the risk_analysis_exemption_indicator of this Ptsv2paymentsConsumerAuthenticationInformationStrongAuthentication.
        This field will contain the transaction risk analysis exemption indicator with one of the following values: Possible values: - `0`  (TRA exemption does not apply to the transaction) - `1` (Transaction exempt from SCA as the merchant/acquirer has determined it to be low risk in accordance with the criteria defined by PSD2/RTS) 

        :return: The risk_analysis_exemption_indicator of this Ptsv2paymentsConsumerAuthenticationInformationStrongAuthentication.
        :rtype: str
        """
        return self._risk_analysis_exemption_indicator

    @risk_analysis_exemption_indicator.setter
    def risk_analysis_exemption_indicator(self, risk_analysis_exemption_indicator):
        """
        Sets the risk_analysis_exemption_indicator of this Ptsv2paymentsConsumerAuthenticationInformationStrongAuthentication.
        This field will contain the transaction risk analysis exemption indicator with one of the following values: Possible values: - `0`  (TRA exemption does not apply to the transaction) - `1` (Transaction exempt from SCA as the merchant/acquirer has determined it to be low risk in accordance with the criteria defined by PSD2/RTS) 

        :param risk_analysis_exemption_indicator: The risk_analysis_exemption_indicator of this Ptsv2paymentsConsumerAuthenticationInformationStrongAuthentication.
        :type: str
        """
        if risk_analysis_exemption_indicator is not None and len(risk_analysis_exemption_indicator) > 1:
            raise ValueError("Invalid value for `risk_analysis_exemption_indicator`, length must be less than or equal to `1`")

        self._risk_analysis_exemption_indicator = risk_analysis_exemption_indicator

    @property
    def trusted_merchant_exemption_indicator(self):
        """
        Gets the trusted_merchant_exemption_indicator of this Ptsv2paymentsConsumerAuthenticationInformationStrongAuthentication.
        Possible values: - `0`  (Trusted merchant exemption does not apply to the transaction) - `1` (Transaction exempt from SCA as it originated at a merchant trusted by the cardholder) 

        :return: The trusted_merchant_exemption_indicator of this Ptsv2paymentsConsumerAuthenticationInformationStrongAuthentication.
        :rtype: str
        """
        return self._trusted_merchant_exemption_indicator

    @trusted_merchant_exemption_indicator.setter
    def trusted_merchant_exemption_indicator(self, trusted_merchant_exemption_indicator):
        """
        Sets the trusted_merchant_exemption_indicator of this Ptsv2paymentsConsumerAuthenticationInformationStrongAuthentication.
        Possible values: - `0`  (Trusted merchant exemption does not apply to the transaction) - `1` (Transaction exempt from SCA as it originated at a merchant trusted by the cardholder) 

        :param trusted_merchant_exemption_indicator: The trusted_merchant_exemption_indicator of this Ptsv2paymentsConsumerAuthenticationInformationStrongAuthentication.
        :type: str
        """
        if trusted_merchant_exemption_indicator is not None and len(trusted_merchant_exemption_indicator) > 1:
            raise ValueError("Invalid value for `trusted_merchant_exemption_indicator`, length must be less than or equal to `1`")

        self._trusted_merchant_exemption_indicator = trusted_merchant_exemption_indicator

    @property
    def secure_corporate_payment_indicator(self):
        """
        Gets the secure_corporate_payment_indicator of this Ptsv2paymentsConsumerAuthenticationInformationStrongAuthentication.
        This field will contain the secure corporate payment exemption indicator with one of the following values: Possible values: - `0`  (SCA exemption does not apply to the transaction) - `1` (Transaction exempt from SCA as the merchant/acquirer has determined it as a secure corporate payment) 

        :return: The secure_corporate_payment_indicator of this Ptsv2paymentsConsumerAuthenticationInformationStrongAuthentication.
        :rtype: str
        """
        return self._secure_corporate_payment_indicator

    @secure_corporate_payment_indicator.setter
    def secure_corporate_payment_indicator(self, secure_corporate_payment_indicator):
        """
        Sets the secure_corporate_payment_indicator of this Ptsv2paymentsConsumerAuthenticationInformationStrongAuthentication.
        This field will contain the secure corporate payment exemption indicator with one of the following values: Possible values: - `0`  (SCA exemption does not apply to the transaction) - `1` (Transaction exempt from SCA as the merchant/acquirer has determined it as a secure corporate payment) 

        :param secure_corporate_payment_indicator: The secure_corporate_payment_indicator of this Ptsv2paymentsConsumerAuthenticationInformationStrongAuthentication.
        :type: str
        """
        if secure_corporate_payment_indicator is not None and len(secure_corporate_payment_indicator) > 1:
            raise ValueError("Invalid value for `secure_corporate_payment_indicator`, length must be less than or equal to `1`")

        self._secure_corporate_payment_indicator = secure_corporate_payment_indicator

    @property
    def delegated_authentication_exemption_indicator(self):
        """
        Gets the delegated_authentication_exemption_indicator of this Ptsv2paymentsConsumerAuthenticationInformationStrongAuthentication.
        This field will contain the delegated authentication exemption indicator with one of the following values: Possible values: - `0`  (delegated Authentication exemption does not apply to the transaction) - `1` (Transaction exempt from SCA as authentication has been delegated to other provider (PSP,Acquirer)) 

        :return: The delegated_authentication_exemption_indicator of this Ptsv2paymentsConsumerAuthenticationInformationStrongAuthentication.
        :rtype: str
        """
        return self._delegated_authentication_exemption_indicator

    @delegated_authentication_exemption_indicator.setter
    def delegated_authentication_exemption_indicator(self, delegated_authentication_exemption_indicator):
        """
        Sets the delegated_authentication_exemption_indicator of this Ptsv2paymentsConsumerAuthenticationInformationStrongAuthentication.
        This field will contain the delegated authentication exemption indicator with one of the following values: Possible values: - `0`  (delegated Authentication exemption does not apply to the transaction) - `1` (Transaction exempt from SCA as authentication has been delegated to other provider (PSP,Acquirer)) 

        :param delegated_authentication_exemption_indicator: The delegated_authentication_exemption_indicator of this Ptsv2paymentsConsumerAuthenticationInformationStrongAuthentication.
        :type: str
        """
        if delegated_authentication_exemption_indicator is not None and len(delegated_authentication_exemption_indicator) > 1:
            raise ValueError("Invalid value for `delegated_authentication_exemption_indicator`, length must be less than or equal to `1`")

        self._delegated_authentication_exemption_indicator = delegated_authentication_exemption_indicator

    @property
    def authentication_indicator(self):
        """
        Gets the authentication_indicator of this Ptsv2paymentsConsumerAuthenticationInformationStrongAuthentication.
        Indicates the type of Authentication request  01 - Payment transaction  02 - Recurring transaction  03 - Installment transaction  04 - Add card  05 - Maintain card  06 - Cardholder verification as part of EMV token ID and V 

        :return: The authentication_indicator of this Ptsv2paymentsConsumerAuthenticationInformationStrongAuthentication.
        :rtype: str
        """
        return self._authentication_indicator

    @authentication_indicator.setter
    def authentication_indicator(self, authentication_indicator):
        """
        Sets the authentication_indicator of this Ptsv2paymentsConsumerAuthenticationInformationStrongAuthentication.
        Indicates the type of Authentication request  01 - Payment transaction  02 - Recurring transaction  03 - Installment transaction  04 - Add card  05 - Maintain card  06 - Cardholder verification as part of EMV token ID and V 

        :param authentication_indicator: The authentication_indicator of this Ptsv2paymentsConsumerAuthenticationInformationStrongAuthentication.
        :type: str
        """
        if authentication_indicator is not None and len(authentication_indicator) > 2:
            raise ValueError("Invalid value for `authentication_indicator`, length must be less than or equal to `2`")

        self._authentication_indicator = authentication_indicator

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Ptsv2paymentsConsumerAuthenticationInformationStrongAuthentication):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
