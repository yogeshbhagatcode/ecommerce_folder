# coding: utf-8

"""
    CyberSource Merged Spec

    All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class InvoicingV2InvoiceSettingsGet200ResponseInvoiceSettingsInformationHeaderStyle(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'font_color': 'str',
        'background_color': 'str'
    }

    attribute_map = {
        'font_color': 'fontColor',
        'background_color': 'backgroundColor'
    }

    def __init__(self, font_color=None, background_color=None):
        """
        InvoicingV2InvoiceSettingsGet200ResponseInvoiceSettingsInformationHeaderStyle - a model defined in Swagger
        """

        self._font_color = None
        self._background_color = None

        if font_color is not None:
          self.font_color = font_color
        if background_color is not None:
          self.background_color = background_color

    @property
    def font_color(self):
        """
        Gets the font_color of this InvoicingV2InvoiceSettingsGet200ResponseInvoiceSettingsInformationHeaderStyle.
        The invoice font color. The format is a valid hexadecimal code prefixed with `#`, such as `#000000` for black.

        :return: The font_color of this InvoicingV2InvoiceSettingsGet200ResponseInvoiceSettingsInformationHeaderStyle.
        :rtype: str
        """
        return self._font_color

    @font_color.setter
    def font_color(self, font_color):
        """
        Sets the font_color of this InvoicingV2InvoiceSettingsGet200ResponseInvoiceSettingsInformationHeaderStyle.
        The invoice font color. The format is a valid hexadecimal code prefixed with `#`, such as `#000000` for black.

        :param font_color: The font_color of this InvoicingV2InvoiceSettingsGet200ResponseInvoiceSettingsInformationHeaderStyle.
        :type: str
        """
        if font_color is not None and len(font_color) > 7:
            raise ValueError("Invalid value for `font_color`, length must be less than or equal to `7`")
        if font_color is not None and not re.search('^#(?:[0-9a-fA-F]{3}){1,2}$', font_color):
            raise ValueError("Invalid value for `font_color`, must be a follow pattern or equal to `/^#(?:[0-9a-fA-F]{3}){1,2}$/`")

        self._font_color = font_color

    @property
    def background_color(self):
        """
        Gets the background_color of this InvoicingV2InvoiceSettingsGet200ResponseInvoiceSettingsInformationHeaderStyle.
        The invoice background color. The format is a valid hexadecimal code prefixed with `#`, such as `#ffffff` for white.

        :return: The background_color of this InvoicingV2InvoiceSettingsGet200ResponseInvoiceSettingsInformationHeaderStyle.
        :rtype: str
        """
        return self._background_color

    @background_color.setter
    def background_color(self, background_color):
        """
        Sets the background_color of this InvoicingV2InvoiceSettingsGet200ResponseInvoiceSettingsInformationHeaderStyle.
        The invoice background color. The format is a valid hexadecimal code prefixed with `#`, such as `#ffffff` for white.

        :param background_color: The background_color of this InvoicingV2InvoiceSettingsGet200ResponseInvoiceSettingsInformationHeaderStyle.
        :type: str
        """
        if background_color is not None and len(background_color) > 7:
            raise ValueError("Invalid value for `background_color`, length must be less than or equal to `7`")
        if background_color is not None and not re.search('^#(?:[0-9a-fA-F]{3}){1,2}$', background_color):
            raise ValueError("Invalid value for `background_color`, must be a follow pattern or equal to `/^#(?:[0-9a-fA-F]{3}){1,2}$/`")

        self._background_color = background_color

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, InvoicingV2InvoiceSettingsGet200ResponseInvoiceSettingsInformationHeaderStyle):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
