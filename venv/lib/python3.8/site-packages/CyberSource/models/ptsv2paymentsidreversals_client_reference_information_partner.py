# coding: utf-8

"""
    CyberSource Merged Spec

    All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Ptsv2paymentsidreversalsClientReferenceInformationPartner(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'developer_id': 'str',
        'solution_id': 'str',
        'third_party_certification_number': 'str'
    }

    attribute_map = {
        'developer_id': 'developerId',
        'solution_id': 'solutionId',
        'third_party_certification_number': 'thirdPartyCertificationNumber'
    }

    def __init__(self, developer_id=None, solution_id=None, third_party_certification_number=None):
        """
        Ptsv2paymentsidreversalsClientReferenceInformationPartner - a model defined in Swagger
        """

        self._developer_id = None
        self._solution_id = None
        self._third_party_certification_number = None

        if developer_id is not None:
          self.developer_id = developer_id
        if solution_id is not None:
          self.solution_id = solution_id
        if third_party_certification_number is not None:
          self.third_party_certification_number = third_party_certification_number

    @property
    def developer_id(self):
        """
        Gets the developer_id of this Ptsv2paymentsidreversalsClientReferenceInformationPartner.
        Identifier for the developer that helped integrate a partner solution to CyberSource.  Send this value in all requests that are sent through the partner solutions built by that developer. CyberSource assigns the ID to the developer.  **Note** When you see a developer ID of 999 in reports, the developer ID that was submitted is incorrect. 

        :return: The developer_id of this Ptsv2paymentsidreversalsClientReferenceInformationPartner.
        :rtype: str
        """
        return self._developer_id

    @developer_id.setter
    def developer_id(self, developer_id):
        """
        Sets the developer_id of this Ptsv2paymentsidreversalsClientReferenceInformationPartner.
        Identifier for the developer that helped integrate a partner solution to CyberSource.  Send this value in all requests that are sent through the partner solutions built by that developer. CyberSource assigns the ID to the developer.  **Note** When you see a developer ID of 999 in reports, the developer ID that was submitted is incorrect. 

        :param developer_id: The developer_id of this Ptsv2paymentsidreversalsClientReferenceInformationPartner.
        :type: str
        """
        if developer_id is not None and len(developer_id) > 8:
            raise ValueError("Invalid value for `developer_id`, length must be less than or equal to `8`")

        self._developer_id = developer_id

    @property
    def solution_id(self):
        """
        Gets the solution_id of this Ptsv2paymentsidreversalsClientReferenceInformationPartner.
        Identifier for the partner that is integrated to CyberSource.  Send this value in all requests that are sent through the partner solution. CyberSource assigns the ID to the partner.  **Note** When you see a solutionId of 999 in reports, the solutionId that was submitted is incorrect. 

        :return: The solution_id of this Ptsv2paymentsidreversalsClientReferenceInformationPartner.
        :rtype: str
        """
        return self._solution_id

    @solution_id.setter
    def solution_id(self, solution_id):
        """
        Sets the solution_id of this Ptsv2paymentsidreversalsClientReferenceInformationPartner.
        Identifier for the partner that is integrated to CyberSource.  Send this value in all requests that are sent through the partner solution. CyberSource assigns the ID to the partner.  **Note** When you see a solutionId of 999 in reports, the solutionId that was submitted is incorrect. 

        :param solution_id: The solution_id of this Ptsv2paymentsidreversalsClientReferenceInformationPartner.
        :type: str
        """
        if solution_id is not None and len(solution_id) > 8:
            raise ValueError("Invalid value for `solution_id`, length must be less than or equal to `8`")

        self._solution_id = solution_id

    @property
    def third_party_certification_number(self):
        """
        Gets the third_party_certification_number of this Ptsv2paymentsidreversalsClientReferenceInformationPartner.
        Value that identifies the application vendor and application version for a third party gateway. CyberSource provides you with this value during testing and validation. This field is supported only on CyberSource through VisaNet.  #### Used by **Authorization, Authorization Reversal, Capture, Credit, Incremental Authorization, and Void** Optional field.  #### PIN debit Required field for PIN debit credit, PIN debit purchase, or PIN debit reversal request. 

        :return: The third_party_certification_number of this Ptsv2paymentsidreversalsClientReferenceInformationPartner.
        :rtype: str
        """
        return self._third_party_certification_number

    @third_party_certification_number.setter
    def third_party_certification_number(self, third_party_certification_number):
        """
        Sets the third_party_certification_number of this Ptsv2paymentsidreversalsClientReferenceInformationPartner.
        Value that identifies the application vendor and application version for a third party gateway. CyberSource provides you with this value during testing and validation. This field is supported only on CyberSource through VisaNet.  #### Used by **Authorization, Authorization Reversal, Capture, Credit, Incremental Authorization, and Void** Optional field.  #### PIN debit Required field for PIN debit credit, PIN debit purchase, or PIN debit reversal request. 

        :param third_party_certification_number: The third_party_certification_number of this Ptsv2paymentsidreversalsClientReferenceInformationPartner.
        :type: str
        """
        if third_party_certification_number is not None and len(third_party_certification_number) > 12:
            raise ValueError("Invalid value for `third_party_certification_number`, length must be less than or equal to `12`")

        self._third_party_certification_number = third_party_certification_number

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Ptsv2paymentsidreversalsClientReferenceInformationPartner):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
