# coding: utf-8

"""
    CyberSource Merged Spec

    All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class TssV2TransactionsGet200ResponseRiskInformation(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'profile': 'TssV2TransactionsGet200ResponseRiskInformationProfile',
        'rules': 'list[TssV2TransactionsGet200ResponseRiskInformationRules]',
        'passive_profile': 'TssV2TransactionsGet200ResponseRiskInformationProfile',
        'passive_rules': 'list[TssV2TransactionsGet200ResponseRiskInformationRules]',
        'score': 'TssV2TransactionsGet200ResponseRiskInformationScore',
        'local_time': 'str'
    }

    attribute_map = {
        'profile': 'profile',
        'rules': 'rules',
        'passive_profile': 'passiveProfile',
        'passive_rules': 'passiveRules',
        'score': 'score',
        'local_time': 'localTime'
    }

    def __init__(self, profile=None, rules=None, passive_profile=None, passive_rules=None, score=None, local_time=None):
        """
        TssV2TransactionsGet200ResponseRiskInformation - a model defined in Swagger
        """

        self._profile = None
        self._rules = None
        self._passive_profile = None
        self._passive_rules = None
        self._score = None
        self._local_time = None

        if profile is not None:
          self.profile = profile
        if rules is not None:
          self.rules = rules
        if passive_profile is not None:
          self.passive_profile = passive_profile
        if passive_rules is not None:
          self.passive_rules = passive_rules
        if score is not None:
          self.score = score
        if local_time is not None:
          self.local_time = local_time

    @property
    def profile(self):
        """
        Gets the profile of this TssV2TransactionsGet200ResponseRiskInformation.

        :return: The profile of this TssV2TransactionsGet200ResponseRiskInformation.
        :rtype: TssV2TransactionsGet200ResponseRiskInformationProfile
        """
        return self._profile

    @profile.setter
    def profile(self, profile):
        """
        Sets the profile of this TssV2TransactionsGet200ResponseRiskInformation.

        :param profile: The profile of this TssV2TransactionsGet200ResponseRiskInformation.
        :type: TssV2TransactionsGet200ResponseRiskInformationProfile
        """

        self._profile = profile

    @property
    def rules(self):
        """
        Gets the rules of this TssV2TransactionsGet200ResponseRiskInformation.

        :return: The rules of this TssV2TransactionsGet200ResponseRiskInformation.
        :rtype: list[TssV2TransactionsGet200ResponseRiskInformationRules]
        """
        return self._rules

    @rules.setter
    def rules(self, rules):
        """
        Sets the rules of this TssV2TransactionsGet200ResponseRiskInformation.

        :param rules: The rules of this TssV2TransactionsGet200ResponseRiskInformation.
        :type: list[TssV2TransactionsGet200ResponseRiskInformationRules]
        """

        self._rules = rules

    @property
    def passive_profile(self):
        """
        Gets the passive_profile of this TssV2TransactionsGet200ResponseRiskInformation.

        :return: The passive_profile of this TssV2TransactionsGet200ResponseRiskInformation.
        :rtype: TssV2TransactionsGet200ResponseRiskInformationProfile
        """
        return self._passive_profile

    @passive_profile.setter
    def passive_profile(self, passive_profile):
        """
        Sets the passive_profile of this TssV2TransactionsGet200ResponseRiskInformation.

        :param passive_profile: The passive_profile of this TssV2TransactionsGet200ResponseRiskInformation.
        :type: TssV2TransactionsGet200ResponseRiskInformationProfile
        """

        self._passive_profile = passive_profile

    @property
    def passive_rules(self):
        """
        Gets the passive_rules of this TssV2TransactionsGet200ResponseRiskInformation.

        :return: The passive_rules of this TssV2TransactionsGet200ResponseRiskInformation.
        :rtype: list[TssV2TransactionsGet200ResponseRiskInformationRules]
        """
        return self._passive_rules

    @passive_rules.setter
    def passive_rules(self, passive_rules):
        """
        Sets the passive_rules of this TssV2TransactionsGet200ResponseRiskInformation.

        :param passive_rules: The passive_rules of this TssV2TransactionsGet200ResponseRiskInformation.
        :type: list[TssV2TransactionsGet200ResponseRiskInformationRules]
        """

        self._passive_rules = passive_rules

    @property
    def score(self):
        """
        Gets the score of this TssV2TransactionsGet200ResponseRiskInformation.

        :return: The score of this TssV2TransactionsGet200ResponseRiskInformation.
        :rtype: TssV2TransactionsGet200ResponseRiskInformationScore
        """
        return self._score

    @score.setter
    def score(self, score):
        """
        Sets the score of this TssV2TransactionsGet200ResponseRiskInformation.

        :param score: The score of this TssV2TransactionsGet200ResponseRiskInformation.
        :type: TssV2TransactionsGet200ResponseRiskInformationScore
        """

        self._score = score

    @property
    def local_time(self):
        """
        Gets the local_time of this TssV2TransactionsGet200ResponseRiskInformation.
        Time that the transaction was submitted in local time.

        :return: The local_time of this TssV2TransactionsGet200ResponseRiskInformation.
        :rtype: str
        """
        return self._local_time

    @local_time.setter
    def local_time(self, local_time):
        """
        Sets the local_time of this TssV2TransactionsGet200ResponseRiskInformation.
        Time that the transaction was submitted in local time.

        :param local_time: The local_time of this TssV2TransactionsGet200ResponseRiskInformation.
        :type: str
        """

        self._local_time = local_time

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, TssV2TransactionsGet200ResponseRiskInformation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
