# coding: utf-8

"""
    CyberSource Merged Spec

    All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Tmsv2customersEmbeddedDefaultPaymentInstrumentMerchantInformationMerchantDescriptor(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'alternate_name': 'str'
    }

    attribute_map = {
        'alternate_name': 'alternateName'
    }

    def __init__(self, alternate_name=None):
        """
        Tmsv2customersEmbeddedDefaultPaymentInstrumentMerchantInformationMerchantDescriptor - a model defined in Swagger
        """

        self._alternate_name = None

        if alternate_name is not None:
          self.alternate_name = alternate_name

    @property
    def alternate_name(self):
        """
        Gets the alternate_name of this Tmsv2customersEmbeddedDefaultPaymentInstrumentMerchantInformationMerchantDescriptor.
        Alternate contact information for your business,such as an email address or URL. This value might be displayed on the cardholder’s statement. When you do not include this value in your capture or credit request, CyberSource uses the merchant URL from your CyberSource account. Important This value must consist of English characters 

        :return: The alternate_name of this Tmsv2customersEmbeddedDefaultPaymentInstrumentMerchantInformationMerchantDescriptor.
        :rtype: str
        """
        return self._alternate_name

    @alternate_name.setter
    def alternate_name(self, alternate_name):
        """
        Sets the alternate_name of this Tmsv2customersEmbeddedDefaultPaymentInstrumentMerchantInformationMerchantDescriptor.
        Alternate contact information for your business,such as an email address or URL. This value might be displayed on the cardholder’s statement. When you do not include this value in your capture or credit request, CyberSource uses the merchant URL from your CyberSource account. Important This value must consist of English characters 

        :param alternate_name: The alternate_name of this Tmsv2customersEmbeddedDefaultPaymentInstrumentMerchantInformationMerchantDescriptor.
        :type: str
        """
        if alternate_name is not None and len(alternate_name) > 13:
            raise ValueError("Invalid value for `alternate_name`, length must be less than or equal to `13`")

        self._alternate_name = alternate_name

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Tmsv2customersEmbeddedDefaultPaymentInstrumentMerchantInformationMerchantDescriptor):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
