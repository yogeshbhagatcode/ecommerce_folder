# coding: utf-8

"""
    CyberSource Merged Spec

    All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Riskv1decisionsidmarkingRiskInformationMarkingDetails(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'notes': 'str',
        'reason': 'str',
        'fields_included': 'list[str]',
        'action': 'str'
    }

    attribute_map = {
        'notes': 'notes',
        'reason': 'reason',
        'fields_included': 'fieldsIncluded',
        'action': 'action'
    }

    def __init__(self, notes=None, reason=None, fields_included=None, action=None):
        """
        Riskv1decisionsidmarkingRiskInformationMarkingDetails - a model defined in Swagger
        """

        self._notes = None
        self._reason = None
        self._fields_included = None
        self._action = None

        if notes is not None:
          self.notes = notes
        if reason is not None:
          self.reason = reason
        if fields_included is not None:
          self.fields_included = fields_included
        if action is not None:
          self.action = action

    @property
    def notes(self):
        """
        Gets the notes of this Riskv1decisionsidmarkingRiskInformationMarkingDetails.
        Notes or details that explain the reasons for marking the transaction as suspect or otherwise.

        :return: The notes of this Riskv1decisionsidmarkingRiskInformationMarkingDetails.
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """
        Sets the notes of this Riskv1decisionsidmarkingRiskInformationMarkingDetails.
        Notes or details that explain the reasons for marking the transaction as suspect or otherwise.

        :param notes: The notes of this Riskv1decisionsidmarkingRiskInformationMarkingDetails.
        :type: str
        """
        if notes is not None and len(notes) > 120:
            raise ValueError("Invalid value for `notes`, length must be less than or equal to `120`")

        self._notes = notes

    @property
    def reason(self):
        """
        Gets the reason of this Riskv1decisionsidmarkingRiskInformationMarkingDetails.
        Reason for marking the transaction as suspect or otherwise. This field can contain one of the following values: - `fraud_chargeback:` You have received a fraud-related chargeback for the transaction. - `non_fraud_chargeback:` You have received a non-fraudulent chargeback for the transaction. - `suspected:` You believe that you will probably receive a chargeback for the transaction. - `creditback:` You issued a refund to the customer to avoid a chargeback for the transaction. 

        :return: The reason of this Riskv1decisionsidmarkingRiskInformationMarkingDetails.
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """
        Sets the reason of this Riskv1decisionsidmarkingRiskInformationMarkingDetails.
        Reason for marking the transaction as suspect or otherwise. This field can contain one of the following values: - `fraud_chargeback:` You have received a fraud-related chargeback for the transaction. - `non_fraud_chargeback:` You have received a non-fraudulent chargeback for the transaction. - `suspected:` You believe that you will probably receive a chargeback for the transaction. - `creditback:` You issued a refund to the customer to avoid a chargeback for the transaction. 

        :param reason: The reason of this Riskv1decisionsidmarkingRiskInformationMarkingDetails.
        :type: str
        """
        if reason is not None and len(reason) > 25:
            raise ValueError("Invalid value for `reason`, length must be less than or equal to `25`")

        self._reason = reason

    @property
    def fields_included(self):
        """
        Gets the fields_included of this Riskv1decisionsidmarkingRiskInformationMarkingDetails.
        This field can contain one or more of the following values. When you specify more than one value, separate them with commas (,). - `account_key_hash` - `customer_account_id` - `customer_email` - `customer_ipaddress` - `customer_phone` - `device_fingerprint` - `ship_address` If no value is specified, `account_key_hash`, `customer_email`, and `ship_address` are used by default. Note `account_key_hash` adds the field that contains the card number (`customer_cc_number`). 

        :return: The fields_included of this Riskv1decisionsidmarkingRiskInformationMarkingDetails.
        :rtype: list[str]
        """
        return self._fields_included

    @fields_included.setter
    def fields_included(self, fields_included):
        """
        Sets the fields_included of this Riskv1decisionsidmarkingRiskInformationMarkingDetails.
        This field can contain one or more of the following values. When you specify more than one value, separate them with commas (,). - `account_key_hash` - `customer_account_id` - `customer_email` - `customer_ipaddress` - `customer_phone` - `device_fingerprint` - `ship_address` If no value is specified, `account_key_hash`, `customer_email`, and `ship_address` are used by default. Note `account_key_hash` adds the field that contains the card number (`customer_cc_number`). 

        :param fields_included: The fields_included of this Riskv1decisionsidmarkingRiskInformationMarkingDetails.
        :type: list[str]
        """

        self._fields_included = fields_included

    @property
    def action(self):
        """
        Gets the action of this Riskv1decisionsidmarkingRiskInformationMarkingDetails.
        This field can contain one of the following values: - add: Mark as Suspect. - clear: Clear Mark as Suspect. - hide: Remove from history. 

        :return: The action of this Riskv1decisionsidmarkingRiskInformationMarkingDetails.
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """
        Sets the action of this Riskv1decisionsidmarkingRiskInformationMarkingDetails.
        This field can contain one of the following values: - add: Mark as Suspect. - clear: Clear Mark as Suspect. - hide: Remove from history. 

        :param action: The action of this Riskv1decisionsidmarkingRiskInformationMarkingDetails.
        :type: str
        """

        self._action = action

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Riskv1decisionsidmarkingRiskInformationMarkingDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
